## geigerlog.cfg - The GeigerLog configuration file with default settings

###############################################################################
##    This file is part of GeigerLog.
##
##    GeigerLog is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    GeigerLog is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with GeigerLog.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

#__author__          = "ullix"
#__copyright__       = "Copyright 2016, 2017, 2018, 2019, 2020, 2021"
#__credits__         = [""]
#__license__         = "GPL3"

# Usage:
# All lines beginning with '#' are comments and will be ignored
#
# The structure is:
#       [Section]
#       # comment
#       # Options:  value1 | value2 | ...
#       # Default = value
#       parameter = value
#
# NOTE: non-acceptable values will be silently ignored, and replaced with
#       defaults, but a debug message will be printed to the terminal and log file
#
# NOTE: There MUST NOT be more than one entry per parameter, or an error
#       will be shown, and the program ends!
#
# NOTE: Exact Capitalization required !!!!
#
# NOTE: Don't need an option? Do NOT delete, leave as is.




[Logging]
# LOGCYCLE:
# GeigerLog's logging cycle in seconds. Can be changed in GeigerLog
#
# Option auto defaults to 3. Any entry less than 0.1 will be replaced with 3.
#
# Options:    auto | <any number 0.1 or greater>
# Default   = auto
#~logcycle    = auto
logcycle    = 1


[Folder]
# DATA DIRECTORY:
# A relative path will be relative to the built-in default data folder.
# A relative path must be given as:
# in Linux:     beginning WITHOUT slash ('/')
# in Windows:   beginning WITHOUT drive name (e.g. 'c:') and beginning
#               WITHOUT backslash ('\') or slash ('/')
#
# An absolute path must be given as:
# in Linux:     beginning WITH slash ('/')
# in Windows:   beginning WITH drive name (e.g. 'c:')
#
# Option auto defaults to folder 'data' as subdirectory to the GeigerLog folder
#
# Options:   auto | <any folder name NOT ending with slash>
# Default  = auto
data       = auto


[Defaults]
# GeigerLog needs some default settings for the case that no device is connected.

# CALIBRATION:
# calibration factors are in units of CPM / (µSv/h), specified individually per
# up to 3 tubes. If none is given, then defaults will be used.
#
# All 3 tubes might belong to one single counter, or belong to 3 different ones.
# This is defined by mapping the respective variables of the devices.
#
# NOTE: beginning with GeigerLog 1.0 the calibration units are INVERSED!
#       see GeigerLog manual for explanations.
#
#       old units:  µSv / h / CPM
#       new units:  CPM / (µSv / h)
#       conversion: new = 1 / old
#       Example:    tube M4011: in old units: 0.0065 µSv/h/CPM.
#                               in new units: 154    CPM / (µSv/h) (= 1 / 0.0065)
#       The numbers are rounded to no more than three signifcant digits.
#
# Some tube with known or claimed calibration factors
#   Source is the source of radioactivity used for this calibration
#   Values in units of CPM / (μSv/h):
#
# Tube-Name   Source      Value
# M4011     : unknown   : 154   Setting in GQ counters
# SI3BG     : unknown   : 5.15  Setting in GQ counters (2nd tube in GMC-500+), Source unknown
#           : Th & K    : 2.08  own experiments using Th and K, may have beta component
#                               http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5369
#             Synch     : 2.38  Synchroton data provided by user Ikerrg
# SBM20     : Co60      : 132   Russian Spec Sheet
# SBM20     : Ra226     : 174   Russian Spec Sheet
# LND 712   : Co60      : 108   LND,Inc. spec sheet https://www.lndinc.com/products/geiger-mueller-tubes/712/
#                               GAMMA SENSITIVITY CO60  (CPS/mR/HR)  18
# LND 7317  : Co60      : 348   LND,Inc. spec sheet https://www.lndinc.com/products/geiger-mueller-tubes/7317/
#                               GAMMA SENSITIVITY CO60  (CPS/mR/HR)  58
#           : unknown   : 379   Setting in GQ's GMC-600 counters
#                               see user Kaban, Reply#3 here: http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=4948
#
# Option auto defaults to these values for tubes 1, 2, 3:
#   DefaultCalib1st = 154
#   DefaultCalib2nd = 2.08
#   DefaultCalib3rd = 154
#
# Options:          auto | <any positive number>
# Default:        = auto
DefaultCalib1st   = auto
DefaultCalib2nd   = auto
DefaultCalib3rd   = auto


[GMCDevice]
# This is valid for all GMC Geiger counter devices. The specific version of the
# counter will be auto-discovered.
#
# GMC ACTIVATION
# to use (yes) or not use (no) a GMC counter.
#
# Options:      yes | no
# Default     = no
GMCActivation = yes
#~GMCActivation = no

# FIRMWARE BUGS
# GQ's firmware has bugs - no surprise for any software. What makes is bad is
# that GQ is dragging their feet when it comes to a complete disclousure of what
# the problem is, and which firmware versions are effected.
# This impacted not only GeigerLog but also their own Dataviewer software.
# So here is an attempt to allow at least for the GeigerLog user to add some
# work-arounds in casemore versions should be affected than currently known

# FIRMWARE BUGS: LOCATION BUG
# The "saving-to-memory" of the counters uses tags (special byte sequences) to
# itentify certain properties needed for the proper parsing of the data.
# Unfortunately, GQ changed the meaning of some tags when they introduced
# 3 and 4 byte storage values, making these firmwares incompatible with previous
# versions. This was reverted, but devices with that wrong firmware were sold.
# See Reply #50, 21.8.2018:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5331
#
# Option auto defaults to: GMC-500+Re 1.18, GMC-500+Re 1.21
#
# Options:        = auto | <Full Version ID>, <Full Version ID>, <Full Version ID>, ...
# Default         = auto
GMClocationBug    = auto

# FIRMWARE BUGS: SPIR BUG:
# See the GeigerLog manual for an explanation of the firmware bugs.
#
# Option auto uses these device specific settings:
#   300  series:  no
#   300E series:  yes
#   320  series:  yes
#   500  series:  no
#   600  series:  no
#
# Options:        auto | yes | no
# Default       = auto
GMC_SPIRbugfix  = auto

# FIRMWARE BUGS: SPIRPAGE:
# The memory is organized in pages of 4k (4096) bytes. Due to firmware bugs,
# the history readout may or may not be possible in 4k pages, but only in 2k
# pages. In addition, a bugfix may have to be applied! See GeigerLog manual
# for details.
#
# Option auto uses these device specific settings:
#   300 series:  2k
#   300E series: 4k - bugfix needed!
#   320 series:  4k - bugfix needed!
#   500 series:  2k - may work also with 4k, 8k, 16k but better make sure!
#   600 series:  2k - may work also with 4k, 8k, 16k but better make sure!
#
# Options:        auto | 2k | 4k | 8k | 16k
# Default       = auto
GMC_SPIRpage    = auto

# FIRMWARE BUGS: FAST ESTIMATE TIME:
# "Fast EstimateTime" is a configuration setting in Device GMC-500+ version
# 2.24 and likely in all other models with a firmware supporting this mode.

# This mode is active by default in its worst setting! It invokes an algorithm,
# which is not disclosed by GQ, which results in a severe distortion of all CPM
# recordings, and may even create counts when there are none.
#
# It has settings of 60, 30, 20, 15, 10 and 5 seconds, plus a 'dynamic' setting,
# which apparently simply stands for 3 seconds. The latter is the default and
# the worst setting.
#
# It looks like this algorithm is switched off at 60 seconds, therefore this
# setting is strongly recommended! GeigerLog gives a warning when a GMC counter
# is activated with this setting at anything besides 60 seconds.
#
# Option auto sets this to 60. Counter's option 'Dynamic' is 3
# Illegal options will be ignored and replaced with auto.
#
# Options:        3, 5, 10, 15, 20, 30, 60
# Default       = auto
GMC_FastEstTime = auto


# MEMORY:
# This is the memory for data storage. It is 64kB in the older devices, and
# 1 MB in the newer ones. As long as the GMC counter can be recognized,
# GeigerLog will automatically make the correct setting. If for any reason this
# needs to be changed, it can be configured here.
#
# 64kB = 2**16 =    65 536 Bytes; fixed setting
# 1MB  = 2**20 = 1 048 576 Bytes; fixed setting
# auto = either 64kB or 1MB, set by GeigerLog
#
# Option auto uses these device specific settings:
#    300 series: 64kB
#    320 series: 1MB
#    500 series: 1MB
#    600 series: 1MB
#
# Options:  auto | 64kB | 1MB
# Default = auto
GMCmemory = auto

# CONFIGURATION MEMORY SIZE:
# This is the configuration memory, not the data storage memory! On the older
# 3XX units it was 256 bytes. On the newer 500, 600 units it is 512 bytes.
#
# Option auto uses these device specific settings:
#   300 series: 256 bytes
#   320 series: 256 bytes
#   500 series: 512 bytes
#   600 series: 512 bytes
#
# Options:      auto | 256 | 512
# Default     = auto
GMCconfigsize = auto

# CALIBRATION:
# General remarks for GMC counter:
# The devices have 3 calibration points for a single tube, but all 3 points
# define only a single calibration factor! Thus a linear calibration is
# implicitly assumed. This factor is 0.0065 µSv/h/CPM for all 300 and 500
# series counters, even if the tube is not the original standard, a M4011 tube,
# but a different one, for which one would expect a different factor!
# The conversion of dose rate from CPM to µSv/h is thus:
#       Dose rate [µSv/h] = Dose rate [CPM] * 0.0065 [µSv/h/CPM]
#
# Note that GeigerLog is now using the inverse of this GQ definition as
# explained in the GeigerLog manual. Thus the conversion is now:
#       Dose rate [µSv/h] = Dose rate [CPM] / 154 [CPM/(µSv/h)]
#       ( 1 / 0.0065 [µSv/h/CPM]) = 154 [CPM/(µSv/h)] )
#
# With the GMC-500+ having 2 tubes, and different ones, an additional 2nd
# calibration factor is needed. GQ is now using 2 of the 3 calibration points
# in the firmware for the 1st tube (the standard, "high-sensitivity" tube,
# and 1 for the calibration factor of the 2nd tube, the "low-sensitivity" tube,
# obviously realizing than a single calibration point suffices!
#
# This entry sets the calibration factor for the 1st tube. This will be applied
# to any CPM, CPS, CPM1st, and CPS1st mapping.
#
# Option auto defaults to these values:
#                CPM/(µSv/h)   µSv/h/CPM (old units)
#   300  series:    154        0.0065
#   320  series:    154        0.0065
#   500  series:    154        0.0065
#   500+ series:    154        0.0065  for the first tube
#                     5.15     0.1940  for the second tube (is wrong, see below)
#                     2.08     0.48    for the second tube (more likely, see below)
#   600  series:    154        0.0065
#   600+ series:    379        0.002637
#
# Options:    auto | <any positive number>
# Default   = auto
calibration = auto

# CALIBRATION 2nd TUBE:
# The GMC500+ counter has a built-in 2nd tube with lower sensitivity than the
# 1st. Its calibration factor as defined by GQ is 0.194 µSv/h/CPM,
# (= 5.15 CPM/(µSv/h)). This definition is still present in the latest firmware
# version 2.24, although this factor is wrong by more than 2fold! The most
# likely value is 2.08 CPM/(µSv/h) = 0.48 µSv/h/CPM.
#
# New synchroton data by user Ikerrg may suggest a slightly higher calibration
# factor of 2.38 CPM/(µSv/h) (= 0.42 µSv/h/CPM). However, it is not known what
# the energy spectrum of the synchroton is, and given the energy dependent
# sensitivity of geiger tubes, this new value might not be valid. It remains
# unknown.
#
# This makes the 2nd tube approx. 70 times less sensitive than the 1st tube!
#
# In earlier versions of the 500+ firmware a factor of 2.56 CPM/(µSv/h)
# (=0.390 µSv/h/CPM) was given, which was actually closer to reality.
#
# For more details see:
# Reply #21 in: http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5148
#
# also see:
# Th and K experiments in:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5369
# calibration2nd = 2.14 CPM/(µSv/h) #from Th experiment Reply #1  (0.4680 µSv/h/CPM)
# calibration2nd = 2.02 CPM/(µSv/h) #from K experiment  Reply #10 (0.4940 µSv/h/CPM)
# calibration2nd = 2.08 CPM/(µSv/h) #final value,       Reply #10 (0.48 µSv/h/CPM)
#
# This will be applied to any CPM2nd, and CPS2nd mapping.
#
# Option auto defaults to 2.08
#
# Options:        auto | <any positive number>
# Default      =  auto
calibration2nd =  auto


# VOLTAGE:
# in the 300 series the battery voltage is reported as a single byte, and the
# voltage is byte/10; e.g. a byte value of 41 is 4.1 Volt
# in the 500 and 600 series the volt is reported as a 5 byte ASCII byte string;
# e.g. b'3.76v' is 3.76 Volt
#
# Option auto uses device specific settings
#
# Options:        auto | 1 | 5
# Default       = auto
GMCvoltagebytes = auto

# ENDIANNESS:
# For the three bytes of the calibration µSv/h values the order of bytes has
# changed in the latest firmware. It is now:
#   300 series:       little-endian
#   500 / 600 series: big-endian
#
# Option auto uses device specific settings
#
# Options:      auto | little | big
# Default:    = auto
GMCendianness = auto

# NBYTES:
# the number of bytes returned by the CPM, CPS, CPM1st, CPM2nd, CPS1st and CPS2nd
# commands. Normally this is 2 bytes, but GMC500+ counter with firmware 1.18 or
# later delivers 4 bytes
#
# Options:   auto | 2 | 4
# Default  = auto
GMCnbytes  = auto


# VARIABLES:
# All GMC counter provide CPM and CPS readings. Only the GMC-500+ device,
# having 2 tubes installed, and having at least firmware 1.18, provides
# additional individual readings for each tube as counts per MINUTE (CPM1st and
# CPM2nd) and counts per SECOND (CPS1st and CPS2nd).
#
# The '1st' and '2nd' settings can be activated for all other counters too, and
# will not result in an error, but will provide the exact same as CPM or CPS!
#
# Note: On the GMC-500+ both CPM and CPS are useless numbers as they are the
# sum of both tubes: CPM=CPM1st+CPM2nd, CPS=CPS1st+CPS2nd. This is no meaningful
# information!
#
# The option X provides the delta of the device time minus the computer time
# in seconds (with only 1 sec precision due to the GMC clock). The GMC-300
# series in particular is notoriuous for its shifting clock, but lately a new
# GMC500+ with firmware 2.24 has also shown a clock shift of 20 sec per day!
#
# The option CPM3rd will create a CPM-value from the readings of CPM1st and
# record it as CPM3rd. This helped to uncover a serious defect in a GMC500+
# counter with firmware 2.24. It might be found on other GMC counters with
# firmware 2.x, but this is unknown so far.
#
# Specifying CPM3rd requires that CPS1st has also been specified, otherwise all
# CPM3rd values will be empty!
#
# Option auto defaults to 'CPM, CPS' to all counters, except for the
# GMC-500+, where it will be 'CPM1st, CPS1st, CPM2nd, CPS2nd'.
#
# Options:     auto | <any combination of CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, X>
# Default    = auto
GMCvariables = auto


[GMCSerialPort]
# This is the Serial Port used for GMC Geiger Counters
#
# GMCSerialPort PORT:
# Name of the serial port; different in Linux, Windows, Mac
# see GeigerLog manual: Appendix B – Connecting Device and Com­puter using a
# Serial Connection
#
# Options: Linux:   /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | ... and others
# Options: Windows: COM3 | COM4 | COM12 | ... and others
# Options: Mac:     /dev/tty.USBSERIAL | /dev/tty.PL2303-xxx | ... and others
# Default  = /dev/ttyUSB0
#~ usbport = /dev/ttyUSB0
GMCusbport = /dev/geiger

# GMCSerialPort BAUDRATE:
# The old 300 devices had a default baudrate of 57600; the newer 320, 500 and
# 600 series have a default of 115200. The device ITSELF must have been set to
# the selected baudrate; it cannot be changed by any external program!
# see Help->Quickstart for instructions and manual
#
# Options:    1200 | 2400 | 4800 | 9600 | 14400 | 19200 | 28800 | 38400 | 57600 | 115200
# Default   = 115200
#~GMCbaudrate = 115200
GMCbaudrate = 57600

# GMCSerialPort TIMEOUT (READ):
# in seconds; for better speed try small number first; 1(fast) ... 10(slow)
# choose greater number when reading problems occur
# NOTE: any number zero or negative will be changed to 3
#
# Options:      <any positive number>
# Default     = 3
GMCtimeout    = 3

# GMCSerialPort TIMEOUT WRITE:
# in seconds; choose greater number when writing problems occur
# NOTE: any number zero or negative will be changed to 1
#
# Options:         <any positive number>
# Default        = 1
GMCtimeout_write = 1

# GMCSerialPort REGULAR SERIAL PORTS
# In USB Autodiscovery Mode Python will find regular Serial Ports like
# /dev/ttySN, N=1,2,3,... in addition to the USB-to-SERIAL ports.
# All of the GMC counters use only the /dev/ttyUSBN, N=1,2,3,... ports.
# Use these settings:
# ttyS = ignore : Ignore  regular Serial Ports when doing USB Autodiscovery
# ttyS = include: Include regular Serial Ports when doing USB Autodiscovery
#
# Options:  ignore | include
# Default = ignore
GMCttyS   = ignore


[AudioCounter]
# Using the PC's internal default audio input (often the microphone) or a USB
# Sound Card to listen to audioclicks from a Geiger counter.
#
# The clicks must reach close to the maximum of the default audio input. The
# input amplification of the PC's sound device should be adjusted accordingly.
# See the manual for pictures

# AudioCounter ACTIVATION
# to use (yes) or not use (no) the AudioCounter
#
# Options:        yes | no
# Default       = yes
AudioActivation = yes

# AudioCounter DEVICE
# The audio device is specified with 2 values: 1st is input, 2nd is output.
# The available devices can be shown by running: 'python3 gdev_audio.py' in the
# GeigerLog directory. The output will be similar to this (some lines removed):
#
#   Available Sound Devices:
#      0 HDA Intel HDMI: 0 (hw:0,3), ALSA (0 in, 8 out)
#      ...
#      4 HDA Intel PCH: ALC887-VD Analog (hw:1,0), ALSA (2 in, 0 out)
#      ...
#      7 USB Audio Device: - (hw:2,0), ALSA (1 in, 2 out)
#      8 hdmi, ALSA (0 in, 8 out)
#      ...
#   * 10 default, ALSA (32 in, 32 out)
#
# Here a total of 11 (0 ... 10) devices are available. Only #4, #7, and #10 have
# inputs available. The star in the leftmost column of #10 marks the default
# device. It also has the name 'default', but it can have any other name, and
# still be the default device! Device #7 is an USB sound card, while the others
# are devices internal of this desktop computer.
#
# If a device is specified as 'None', then the system's default will be used.
# Otherwise specify its name or its number, examples:
#       None, None
#       HDA Intel PCH, 10
#       USB, hdmi
#       7, 8
# The last two lines specify the same devices in this example
#
# Option auto defaults to None, None
#
# Options:        auto | None, None | < <InputDevice Name|Number>, <OutputDevice Name|Number> >
# Default       = auto
AudioDevice     = auto


# AudioCounter LATENCY
# Can be used to finetune the AudioCounter behavior. From experience, and
# dpendent on the sound card, values in sec from 0.05 ... 2.0 may be helpful.
#
# Option auto defaults to 1.0, 1.0
#
# Options:        auto | <<any number greater than zero> , <any number greater than zero>>
# Default       = auto
AudioLatency    = auto

# AudioCounter PULSEMAX
# The audio input is normally at zero, and for 16bit resolution (as used here)
# the maximum signal is thus plus/minus 32768. However, depending on operating
# system this may be seen as plus/minus 1 or any other range.
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
#
# Option auto defaults to 32768
#
# Options:        auto | <any number greater than zero>
# Default       = auto
AudioPulseMax   = auto

# AudioCounter PULSEDIR
# The audio input is normally at zero, and any pulses are either positive or
# negative. Pulses from a GMC300E+, or a SGP-001 are negative
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
# Option auto defaults to negative
#
# Options:        auto | negative | positive
# Default       = auto
AudioPulseDir   = auto

# AudioCounter Threshold
# If possible the audio input should be adjusted such that the Geiger pulses
# reach the negative/positive limit. The number given here sets the percentage
# of the maximum possible signal which must be reached in order to trigger a
# count. 60[%] has been a good value so far.
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
# Option auto defaults to 60
#
# Options:        auto | < a positive number less than 100>
# Default       = auto
AudioThreshold  = auto

# AudioCounter CALIBRATION:
# To be given in units of CPM/(µSv/h)
# For a GMC counter with a M4011 tube the calibration factor is 154 CPM/(µSv/h)
# (or 0.0065 µSv/h/CPM).
#
# For a SGP-001 device, the manufacturer FTLab specifies it as 0.09 µSv/h/CPM,
# or 11.1 CPM/(µSv/h)
#
# Option auto defaults to 154
#
# Options:          auto | <any positive number>
# Default         = auto
AudioCalibration  = auto

# AudioCounter VARIABLES:
# All CPM* and CPS* are available (CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd)
# but if 2 variables are given, they must be of the M and S type (per minute, per second)
# Make sure the mapping is not in conflict with other devices' mapping!
# Option auto defaults to 'CPM3rd, CPS3rd'
#
# Options:        auto | <any combination of CPM*, CPS*, see above>
# Default       = auto
AudioVariables  = auto



[RadMonPlusDevice]
# NOTE: RadMon device may not be able to connect to a server which is using the
# protocol=mqtt.MQTTv31; it is demanding protocol=mqtt.MQTTv311 !
#
# A device from here: https://sites.google.com/site/diygeigercounter/gk-radmon
# The RM+ can act as a Geiger counter providing CPM data, and with an optional
# BME280 sensor additionally acts as an environmental monitor for Temperature,
# Pressure, and Humidity. The RM+ must be configured to send its data to an
# MQTT server. This server's IP must be made known to GeigerLog.
#
# The RM+ update cycle can be configured at the RM+, but it is best set to
# 60 sec for CPM readings, and with an extra of about 7 sec for reading the
# environmental sensor and sending the data, the total cycle is about 67sec.
#
# GeigerLog connects to the MQTT server for new data and logs them. GeigerLog
# can read all 4 variables. If no new data are found, the log displays empty
# values, but they won't be saved in the records. Logging/displaying/analyzing
# will not be impacted.
#
# Demonstration Mode
# A Demo-Mmode can be activated in GeigerLog, which defines my per­sonal
# RadMon+ device as active, and allows any user of GeigerLog to read genuine
# real-time data from a RadMon+.


# RadMonPlusDevice ACTIVATION
# to use (yes) or not use (no) the RadMonPlusDevice
#
# Options:        yes | no
# Default       = no
RMActivation    = no

# RadMonPlusDevice SERVERIP:
# The server IP can be either a numerical IP like "10.0.0.81" (in local network),
# or "198.41.30.241", or a URL like "mqtt.eclipse.org".
#
# NOTES: previously used server "iot.eclipse.org" is out-of-service!
#        previously used server "mqtt.eclipse.org" is out-of-service (since
#        December 12, 2020)
#
# newly chosen server: "test.mosquitto.org", see: http://test.mosquitto.org/
#
# Other IP options: https://github.com/mqtt/mqtt.github.io/wiki/public_brokers
# -  broker.hivemq.com  (tested ok, see: http://www.mqtt-dashboard.com/)
#
# Test: If you have the mosquitto clients installed try:
#       mosquitto_sub -h test.mosquitto.org -t "geigerlog/#" -v
#
# Option auto becomes "test.mosquitto.org" (IP: 5.196.95.208)
#
# Options:    auto | <IP address>
# Default   = auto
RMServerIP  = auto

# RadMonPlusDevice SERVER PORT:
# Standard port is 1883
#
# Option auto becomes 1883
#
# Options:     auto | <port number>
# Default    = auto
RMServerPort = auto

# RadMonPlusDevice SERVER FOLDER:
# This must be the same folder as defined during the setup of the RadMon+ device.
# for details search for MQTT. In MQTT these folders are called 'topics'.
# CAUTION: you get flooded with useless messages when you enter no proper folder!
#
# A blank (' ') is not allowed in the folder name! If no final '/' is given, it
# will be auto-added
#
# Options:        <folder as defined in your RadMon+ device, ending with '/'>
# Default       = /
# Demo-Mode:    = geigerlog/
RMServerFolder  = geigerlog/

# RadMonPlusDevice TIMEOUT:
# establishing a connection in a local network takes ~10 milliseconds, but to a
# remote server on poor connections might take several hundred milliseconds.
# To be on the safe side a timeout of 3 sec is set, as used for the serial port
# NOTE: any number zero or negative will be changed to 3
#
# Option auto defaults to 3
#
# Options:        auto | <any positive number>
# Default       = auto
RMTimeout       = auto

# RadMonPlusDevice CALIBRATION:
# Calibration for the tube used in the RadMon+ setting in units of CPM/(µSv/h)
# Note: the calibration factor existing within RadMon+ firmware is ignored.
#
# Option auto defaults to 154
#
# Options:        auto | <any positive number>
# Default      =  auto
RMCalibration  =  auto

# RadMonPlusDevice VARIABLES:
# The RM+ can provide only CPM data, or only T, P, H (Temperature, Pressure,
# Humidity) data, or all 4 of them.
#
# The CPM values can be mapped to any of the CPM* variables. Any CPS* setting
# will be ignored.
#
# As the T, P, H data come from one sensor, they are either all present or
# none, yet you can select or ignore them individually for logging.
#
# Option auto defaults to 'CPM3rd, T, P, H'
#
# Options:        auto | <any combination of T, P, H, and one of (CPM, CPM1st, CPM2nd, CPM3rd)>
# Default       = auto
RMVariables     = auto


[AmbioMonDevice]
# A device in development
#
# The AmbioMonDevice provides Geiger counter CPM / CPS data, and with its
# BME680 sensor provides environmental data for Temperature, Pressure,
# Humidity, and Air Quality.
#
# GeigerLog connects to the AmbioMonDevice via local or remote internet
# connection. GeigerLog can read and log all variables, and it can download any
# history stored on the AmbioMonDevice.


# AmbioMonDevice ACTIVATION
# to use (yes) or not use (no) the AmbioMonDevice
#
# Options:        yes | no
# Default       = no
AmbioActivation = no


# AmbioMonDevice SERVER IP:
# The IP from your AmbioMon Device, like '198.41.30.241'. You must provide this
# IP Address.
#
# Option auto defaults to 198.41.30.241, which satisfies the need for a valid
# setting but is ALMOST ALWAYS WRONG!
#
# Options:        auto | <IP address>
# Default       = auto
#~AmbioServerIP   = auto
AmbioServerIP   = 10.0.0.85


# AmbioMonDevice TIMEOUT:
# Establishing a connection in a local network takes ~10 milliseconds, but may
# take much longer and may fail. To be on the safe side a timeout of 3 sec is
# set. If this still fails, then something else may be wrong!
# NOTE: any option number zero or negative will be changed to 3
# Option auto defaults to 3.
#
# Options:        auto | <any positive number>
# Default       = auto
AmbioTimeout    = auto

# AmbioMonDevice CALIBRATION:
# Calibration for the tube used in the AmbioMon in units of CPM / (µSv/h)
# Option auto defaults to 154 (the inverse of 0.0065), the number used by GQ
# for the M4011 tube.
#
# Options:          auto | <any positive number>
# Default        =  auto
AmbioCalibration =  auto

# AmbioMonDevice VARIABLES:
# The AmbioMon can provide CPM, CPS, T, P, H, X (Temperature, Pressure,
# Humidity, Air quality) data.
# The CPM / CPS values should be mapped to any of the CPM*/CPS* variables.
# As the T, P, H, X data come from one sensor, they are either all or none
# present, yet you can select or ignore them individually for logging.
# Option auto defaults to 'CPM, CPS, T, P, H, X'.
#
# Options:        auto | <any combination of T, P, H, X,
#                             one of (CPM, CPM1st, CPM2nd, CPM3rd)
#                         and one of (CPS, CPS1st, CPS2nd, CPS3rd)>
# Default       = auto
AmbioVariables  = auto

# AmbioMonDevice DATATPYE
# The datatype GeigerLog will request from the AmbioMon Device. Can be
# - Last : the set of values collected in the last second
# - Avg  : the average of the alues over the last minute
# Option auto defaults to 'Last'
#
# Options:        auto | Last | Avg
# Default       = auto
AmbioDataType   = auto



[GammaScoutDevice]
# Using a Gamma-Scout Geiger counter
# see: https://www.gamma-scout.com/unsere-produkte/
#
# GammaScoutDevice Activation
# to use (yes) or not use (no) GammaScoutDevice
#
# Options:      yes | no
# Default     = no
GSActivation  = no

# GammaScoutDevice VARIABLES:
# Currently only the NON-LIVE Gamma Scout counters are supported by GeigerLog,
# which CANNOT log! Thus the variables refer only to the data DOWNLOADED from
# the device!
#
# On DOWNLOADS from the GammaScout Device:
#   CPM1st : gets the counts in whatever the interval set at the counter. It
#            may change during a run!
#   X      : gets the interval over which each value of CPM1st is measured
#   CPM2nd : gets CPM as CALCULATED from CPM1st and X
#
# Generally, as CPM is calculated from CPM1st, it cannot be Poisson tested! And
# neither can the CPM1st values, as the interval might have changed!
#
# On LOGGING:
# While logging can be started. only empty data will be returned!
#
# Option auto defaults to 'CPM2nd'
#
# Options:       auto
# Default      = auto
GSVariables    = auto

# GammaScoutDevice CALIBRATION:
# The device uses an LND712 tube, see top of this file for tube properties.
#
# The calibration is valid only for the (calculated) CPM2nd values!
#
# Option auto defaults to 108
#
# Options:        auto | <any positive number>
# Default =       auto
GSCalibration  =  auto


[GammaScoutSerialPort]
# This is the Serial Port used for all Gamma Scout devices
#
# GammaScoutSerialPort PORT:
# Name of the serial port; different in Linux and Windows
# see manual: Appendix B – Connecting Device and Com­puter using a Serial Connection
#
# Options: Linux:   /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | ... and others
# Options: Windows: COM3 | COM12 | ... and others
# Default  = /dev/ttyUSB2
#GSusbport  = /dev/ttyUSB2
#GSusbport  = COM5
GSusbport  = /dev/ttyS91

# GammaScoutSerialPort BAUDRATE:
# depends on GS Device, but factory fixed per device
#
# Options:    2400 | 9600 | 460800
# Default   = 9600
GSbaudrate  = 9600

# GammaScoutSerialPort TIMEOUT (READ):
# in seconds; for better speed try small number first; 1(fast) ... 10(slow)
# choose greater number when reading problems occur
# NOTE: some responses of Gamma-Scout take almost 1 sec, timeout setting must
# be well above the 1 sec limit!
#
# Any option number zero or negative will be set to 3
#
# Options:   <any positive number>
# Default  = 3
GStimeout  = 3

# GammaScoutSerialPort TIMEOUT WRITE:
# in seconds; choose greater number when writing problems occur
# NOTE: any number zero or negative will be set to 3
#
# Options:         <any positive number>
# Default        = 3
GStimeout_write  = 3

# GammaScoutSerialPort REGULAR SERIAL PORTS
# applicable only for Linux; no effect in Windows
# In USB Autodiscovery Mode Python will find regular Serial Ports like
# /dev/ttySN, N=1,2,3,... in addition to the USB-to-SERIAL ports.
# All of the GMC counters use only the /dev/ttyUSBN, N=1,2,3,... ports.
# Use these settings:
# ttyS = ignore : Ignore  regular Serial Ports when doing USB Autodiscovery
# ttyS = include: Include regular Serial Ports when doing USB Autodiscovery
#
# Options:  ignore | include
# Default = ignore
#GSttyS    = ignore
GSttyS    = include




[I2CSensors]
# Using an I2C BME280 sensor connected via an ELV dongle
# see: https://sourceforge.net/projects/i2cpytools/
#
# I2CSensors Activation
# to use (yes) or not use (no) I2C Device
#
# Options:      yes | no
# Default     = no
I2CActivation = no


# I2CSensors VARIABLES:
# T, P, H (Temperature, Pressure, Humidity) is available on the BOSCH BME280
# sensor, and on the TSL2591 sensor is visible light (relative units) as X
#
# Option auto defaults to 'T, P, H, X'
#
# Options:        auto | <any combination of T, P, H, X>
# Default       = auto
I2CVariables    = auto


[I2CSerialPort]
# This is the Serial Port used for all I2C devices, connected via the ELV dongle
#
# I2CSerialPort PORT:
# Name of the serial port; different in Linux and Windows
# see manual: Appendix B – Connecting Device and Com­puter using a Serial Connection
#
# Options: on Linux:   /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | ... and others
# Options: on Windows: COM3 | COM12 | ... and others
# Default  = /dev/ttyUSB1
I2Cusbport = /dev/ttyUSB1

# I2CSerialPort BAUDRATE:
# see ELV user manual, chapter 4.2.3 for changing the baudrate
#
# Options:    4800 | 9600 | 19200 | 38400 | 57600 | 76800 | 115200 | 230400
# Default   = 115200
I2Cbaudrate = 115200

# I2CSerialPort TIMEOUT (READ):
# in seconds; for better speed try small number first; 1(fast) ... 10(slow)
# choose greater number when reading problems occur
# NOTE: any number zero or negative will be set to 3
#
# Options:   <any positive number>
# Default  = 3
I2Ctimeout = 3

# I2CSerialPort TIMEOUT WRITE:
# in seconds; choose greater number when writing problems occur
# NOTE: any number zero or negative will be set to 1
#
# Options:         <any positive number>
# Default        = 3
I2Ctimeout_write = 3

# I2CSerialPort REGULAR SERIAL PORTS
# In USB Autodiscovery Mode Python will find regular Serial Ports like
# /dev/ttySN, N=1,2,3,... in addition to the USB-to-SERIAL ports.
# All of the GMC counters use only the /dev/ttyUSBN, N=1,2,3,... ports.
# Use these settings:
# ttyS = ignore : Ignore  regular Serial Ports when doing USB Autodiscovery
# ttyS = include: Include regular Serial Ports when doing USB Autodiscovery
#
# Options:  ignore | include
# Default = ignore
I2CttyS   = ignore



[LabJackDevice]
# NOTE: verfied to work **ONLY** on Linux; it may work on Mac
#       Windows needs a different installation of drivers, not tested
#
# A device of the LabJack category from company LabJack:  https://labjack.com/
# currently only the U3 Series is supported, and only for the use of the
# EI1050 Digital Temperature/Humidity Probe
# https://labjack.com/accessories/ei1050-digital-temperaturehumidity-probe
# The LabJack device is connected via USB bus (true USB, NOT a USB-to-Serial!).
#
# The probe delivers a Temperature and a Humidity value, which are mapped onto
# the variables T and H. In addition the internal temperature of the LabJack U3
# device is mapped onto the X variable (typically a few degrees higher than the
# probe temperature).
#
# If you want to use LabJack, you need additional installations; see header of
# file gdev_labjack.py

# LabJackDevice ACTIVATION
# to use (yes) or not use (no) LabJack
#
# Options:     yes | no
# Default    = no
LJActivation = no

# LabJackDevice VARIABLES:
# T, H, X (Temperature, Humidity, internal temperature) is available
# Option auto defaults to 'T, H, X'
#
# Options:        auto | <any combination of T, H, X>
# Default       = auto
LJVariables     = auto


[SimulCounter]
# Using a Poisson number generator to get "counts", simulating a recording with
# defined Poisson properties

# SimulCounter ACTIVATION
# to use (yes) or not use (no) the SimulCounter
#
# Options:        yes | no
# Default       = yes
SimulActivation = no

# SimulCounter MEAN
# A Poisson generator needs only a single value, which is the mean of the
# distribution. It is interpreted as CPS.
#
# A typical background count for a M4011 or SBM20 tube is CPM = 18, which gives
# CPS = 18 / 60 = 0.3.
#
# Note: an option of 0 (zero) is mathematically possible, but meaningless, as
# there will never be a single "count".
#
# Option auto defaults to 0.3
#
# Options:        auto | <any number >= 0>
# Default       = auto
#~SimulMean       = auto
SimulMean       = 10

# SimulCounter PREDICTIVE
# Determines whether CPM is let to accumulate or a prediction is made after
# first counts.
#
# Option auto defaults to 'no'
#
# Options:        auto | yes | no
# Default       = auto
#~SimulPredictive   = auto
SimulPredictive   = no

# SimulCounter PREDICTLIMIT
# Sets the count limit which CPM must have reached before a first CPM-prediction
# is given. Before CPM will be reported as NAN.
# Statistical certainty from Std.Dev = Sqrt(N) (valid for Poisson):
# CPM =  10:   ~30%
# CPM =  25:    20%
# CPM = 100:    10%
#
# Option auto defaults to 25
#
# Options:          auto | <any number >= 0 >
# Default         = auto
SimulPredictLimit = auto

# SimulCounter CALIBRATION:
# To be given in units of CPM/(µSv/h). See notes above under GMC calibration
# and under AudioCalibration.
#
# Option auto defaults to 154
#
# Options:          auto | <any positive number>
# Default         = auto
SimulCalibration  = auto

# SimulCounter VARIABLES:
# All CPM* and CPS* are available (CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd,
# CPM3rd, CPS3rd), but only 1 or 2 can be chosen. If 2 are given, then
# one must be CPM* type, and one must be CPS* type, and must be of same tube
# number, i.e. both are 1st, or 2nd, or 3rd!
#
# Make sure the mapping is not in conflict with other devices' mapping!
#
# Option auto defaults to 'CPM2nd, CPS2nd'
#
# Options:        auto | <any one CPM* and/or one CPS*, see above>
# Default       = auto
SimulVariables  = auto
#~SimulVariables  = CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd, T, H, X



[MiniMon]
# MiniMon is a CO2 monitor for indoor use available from multiple distributors,
# e.g. also from TFA Drostman, https://www.amazon.de/gp/product/B00TH3OW4Q/
# Also: https://www.co2meter.com/products/co2mini-co2-indoor-air-quality-monitor
# The USB ID by lsusb is:     ID 04d9:a052 Holtek Semiconductor, Inc.
#
# MiniMon ACTIVATION
# to use (yes) or not use (no) the MiniMon device
#
# Options:          yes | no
# Default         = yes
MiniMonActivation = no

# MiniMon Device
# MiniMon will appear as a hiDraw device. Use ls -al /dev/hiraw* to list
# devices. The will list as /dev/hidraw1, /dev/hidraw2, /dev/hidraw3, etc.
# It is recommendet to set a udev rule to make the device always show as e.g.
# /dev/minimon. See header of file gdev_minimon.py for details.
#
# Option auto defaults to /dev/minimon
#
# Options:      auto | < a hidraw device like /dev/hidraw3 >
# Default     = auto
MiniMonDevice = auto


# MiniMon VARIABLES:
# T (for Temperature) and X (for CO2) available as standard. Some devices also
# have H (for Humidity) avalabel. The TFA Drostmann device mentioned above does
# NOT have the humidity sensor. If H is specified but there is no sensor, then
# H will always be 0 (zero).
#
# Option auto defaults to 'T, X'
#
# Options:         auto |  <any combination of T, H, X>
# Default        = auto
MiniMonVariables = T, H, X


# MiniMon INTERVAL:
# The T, H, X values change only very slowly. In order to save recording space,
# a record will only be saved if at least one variable value has changed. As
# this may take several minutes, the interval set here forces a saving if none
# has occured for interval minutes.
#
# Option auto defaults to 1 (minute).
#
# Options:        auto |  <any number greater zero >
# Default       = auto
MiniMonInterval = auto


[Graphic]
# MOVING AVERAGE:
# in sec; 60 sec = 1 min is adequate for seeing CPS recorded data as CPM equiv
#
# Options:    <any number equal or greater than 1>
# Default   = 60
mav_initial = 60


[Plotstyle]
# If your plot does not come out as expected, check the geigerlog.proglog file
# for messages; you may have set an unrecognizeable style.

# LINEWIDTH:
# The width of the line as integer or floating point >= 0. A width of 0 (zero)
# makes the line invisible.
#
# Options:  <any number greater or equal to 0>
# Default = 1
linewidth = 1

# MARKERSTYLE:
# Allowed styles at:
# https://matplotlib.org/api/markers_api.html#module-matplotlib.markers
#
# Options:   "o" (circle)  | "s" (square) | "p" (pentagon) | "*" (star) |
#            "h" (hexagon) | "+" (plus)   | "x" (x)        | "D" (diamond)
# Default   = o (small cap o, like in oscar)
markerstyle = o

# MARKERSIZE:
# The size of the marker for a datapoint. A marker size of x has the same
# diameter as a line of width x is wide, i.e. the marker would not be
# visible on the line!
#
# GeigerLog reduces the markersize with increasing number of data points. Here
# you specify the starting size. i.e. when a single data point is shown.
#
# Options:    <any number greater or equal to 0>
# Default   = 15
markersize  = 15


[Window]

# HiDPI MONITORS
# High-Resolution Monitors of size 4k and 8k are becoming affordable, but
# represent a challenge for a lot of software. Details in the GeigerLog manual.
#
# This is work-in-progress and may need custom modifications if the auto
# settings do not work well (enough).
#
# HiDPIactivation
# This option should not give problems on any system.
#
# A known exception is the Raspberry 4 system (status August 2020), where the
# setting must be 'no' or the screen will be distorted and GeigerLog difficult
# to use.
#
# Option auto defaults to 'yes'
#
# Options:         auto | yes | no
# Default        = auto
HiDPIactivation  = auto


# HiDPIscaleMPL
# This compensates any HiDPI scaling for the graphs, which are generated by
# matplotlib. It may not work in all cases.
#
# For a FullHd the 'scaling' set in the operating system is typically 100%. Any
# different scaling must be compensated by HiDPIscaleMPL.
#
# For a HiDPI screen the scaling maybe 150%, 200%, 300%, or 400%. Numbers
# different from this list may result in problems!
#
# If the 'auto' option does not give satisfactory results, try these settings:
#   scaling: 150%     ->  HiDPIscaleMPL = 70
#   scaling: 200%     ->  HiDPIscaleMPL = 50
#   scaling: 300%     ->  HiDPIscaleMPL = 33
#   scaling: 400%     ->  HiDPIscaleMPL = 25
# and modify until you find a satisfactory setting. Floating point ok.
#
# Option auto defaults to a value calculated internally, which may or may not be
# appropriate.
#
# Options:      auto | <any number greater than zero>
# Default     = auto
HiDPIscaleMPL = auto


# WINDOW POSITION AND SIZE:
# The window is positioned at the top right corner; Dimensions in pixel.
# GeigerLog will run on a screen size as small as 1024x768, but it is
# cumbersome to use and not recommended. Minimum screen size should be 1366x768.
# Depending on Window manager and custom configuration, the default may not
# fit. Change to adapt for your screen and settings.
#
# Default assumes 1366x768 with 2 panels of height 24 and std window bar
#
# Options:         <any positive numbers>
# Default width  = 1366
#         height = 720
width            = 1366
height           = 720

# WINDOW MAXIMIZE:
# window size can be auto or maximized. On auto it will be tried to set to
# width x height as defined above. On maximized the window will be maximized.
#
# Option auto defaults to not-maximized
#
# Options:  auto | maximized
# Default = auto
size      = auto

# WINDOW STYLE:
# The style determines Look & Feel. The default style is determined by the
# system itself. Each system may only have a subset of the styles listed:
#   Linux:    Breeze, Windows, Motif, CDE, Plastique, GTK+, Cleanlooks, Fusion, ...
#   Windows:  Windows, WindowsXP, WindowsVista, ...
#   Mac:      Aqua, Macintosh, ...
#
# Find out what your systems has to offer by starting GeigerLog from the command
# line with: 'geigerlog showstyles'.
#
# If an unavailable style is set, then the default is used.
#
# Option auto defaults to the style selected by the operating system
#
# Options:    auto | <see above; correct capitalization required>
# Default   = auto
windowStyle = auto



[Manual]
# Manual NAME:
# Filename of the GeigerLog manual included with the code.
#
# Option auto defaults to the first found local file with a filename beginning
# with 'GeigerLog-Manual'. If none found, GeigerLog looks online.
#
# Options:    auto | <full name like: 'GeigerLog-Manual-v1.0.pdf'>
# Default   = auto
manual_name = auto


[Worldmaps]
###############################################################################
## EDITING NOTE:
## If the percent-sign ('%') is to be used anywhere, it must be entered in
## duplicate! So, e.g. in a password:
##      WRONG:   my%password
##      RIGHT:   my%%password
## The end result in GeigerLog will be a single '%' only:   my%password
## (a consequence of Python's string formatting)
###############################################################################

# WEBSITE and page
# GQ's gmcmap website and url for uploading readings
# The two will be combined to: http://www.gmcmap.com/log2.asp
GMCmapWebsite       = http://www.gmcmap.com
GMCmapURL           = log2.asp

# SSID and PASSWORD in your local network
#
# from IEEE specification:
# The length of an SSID should be a maximum of 32 characters (32 octets,
# normally ASCII letters and digits, though the standard itself doesn't exclude
# values). Some access point/router firmware versions use null-terminated
# strings and accept only 31 characters.
#
# 1 octet = 1 byte of 8 bits = 1 ASCII character
#
# SSID:     a maximum of 32 octets
# Password: a maximum of 63 octets (WPA-PSK / WPA2-PSK)

# 32 octets:
#~GMCmapSSID        = 123456789:123456789:123456789:12
# 63 octets:
#~GMCmapPassword    = pp3456789:pp3456789:pp3456789:pp3456789:pp3456789:pp3456789:pp3
GMCmapSSID          = my:ssid
GMCmapPassword      = my:very:best:password:#+@-_§$&%%:all:ASCII

# PERIOD
# min to wait before uploading next value
# Default in GMC devices is 2.
GMCmapPeriod        = 33

# USER ID and COUNTER ID
# Valid only for GQ's gmcmap.
# Register at http://www.gmcmap.com/ and obtain:
#   - a UserID      (probably 5 digits)
#   - a CounterID   (probably 11 digits).
#
# Default        = <empty when undefined>
#GMCmapUserID    =
#GMCmapCounterID =

# Dummy values:
# try these user and counter IDs for testing without creating a bad entry, as
# the server will reject the data with response: 'Error! User not found.ERR1.'
GMCmapUserID        = 12345
GMCmapCounterID     = 12345678901


[ValueScaling]
# An option to scale the data with a math formula. The formula may include
# math functions. The scaled data will be logged, not the original data!
#
# Use to apply calibration to the variables. E.g., if Temperatur is 2.4 °C too
# high, you can define to subtract 2.4°C from Temperature.
# Or use it to apply a dead time correction to CPM or CPS.
# Or use it to rescale the Air-Pressure to sealevel.

# + - * / :   basic math
# **:         raise to the power, e.g. 2**8  (2**8 = 256)
# VAL:        the value to be scaled, the actual measured value
# LOG:        log to base e; natural log
# LOG10:      log to base 10
# LOG2:       log to base 2
# SIN:        sine
# COS:        cosine
# TAN:        tangent
# SQRT:       square root
# CBRT:       cube root
# ABS:        absolute value

# example:    val - 1000
# example:    SQRT(val) * 5 + 100
# example:    ABS((LOG10(val)+1000)/3.14) + 10

# Option:     val | <math formula> | <empty>
# Default:    val

# if only 'val' is given, then no modification will be applied to the value

# CPM correction for deadtime:
# is defined by formula:      CPM_true = CPM_obs / (1 - cpm_obs * deadtime)
# Deadtime is assumed to be 200µsec
# Deadtime MUST be used in the time unit used for the counts, i.e. if you use:
# CPM: unit is minutes (200µs = 200 * 1E-6 / 60 minutes =  3.333*10E-6 minutes)
# CPS: unit is seconds (200µs = 2*10E-4 seconds)
# take the int of it to not confuse Poisson tests with fractional numbers!
# like so:
# ValueScale["CPM"]    = int(val / (1 - val * 200 * 1E-6 / 60))
# ValueScale["CPS"]    = int(val / (1 - val * 200 * 1E-6))

# Temperature correction, when you have a reference thermometer
# like :  T_RM+ calibrated against Greisinger G1720 2018-08-17
# T = val - 1.8

# Pressure reduction to sea level - at altitude < 50m
# "Pressure Reduction Formula", WORLD METEOROLOGICAL ORGANIZATION,
# CIMO/ET-Stand-1/Doc. 10, (20.November.2012), chapter 3.11.2 Low-level stations
#
# At low-level stations (namely, those at a height of less than 50 m above mean
# sea level), pressure readings should be reduced to mean sea level by adding
# to the station pressure a reduction constant C given by the following
# expression: C = p . Hp /29.27 Tv  (3.3)
# valid for heights less than 50m above sea level
# p is the observed station pressure in hectopascals; Hp is the station
# elevation in metres; and Tv is the mean annual normal value of virtual
# temperature at the station in kelvins.
# like so:
# ValueScale["P"]      = val + val * 85 / (29.27 * 293)

# Pressure reduction to sea level - any altitude, but needs T
# https://keisan.casio.com/exec/system/1224575267
# Sea level pressure: pressure in [hPa]
# p0 at sea level, p at altitude h[m], T[°C]
# p0 = p * (1 - (0.0065 * h) / (T + 0.0065 * h + 273.15))**(-5.257)
# like so, using h= 85m, T=20°C
# ValueScale["P"]      = val * (1 - (0.0065 * 85) / (20 + 0.0065 * 85 + 273.15))**(-5.257)

CPM    = val
CPS    = val
CPM1st = val
CPS1st = val
CPM2nd = val
CPS2nd = val
CPM3rd = val
CPS3rd = val
T      = val
P      = val
H      = val
X      = val


[GraphScaling]
# This does only change how the variable is plotted; it does NOT change the
# value of the variable as saved, different from the 'ValueScaling' case above!
#
# For details on the scaling and formulas see 'ValueScaling' above.
#
# As an example, the Pressure, which is mostly around 1000 +/- 30 hPa, will be
# plotted as: P = P - 1000 to better fit on the ambient scale
# The ambient X value is scaled to limit the value to within something fitting
# into the ambient scale

CPM    = val
CPS    = val
CPM1st = val
CPS1st = val
CPM2nd = val
CPS2nd = val
CPM3rd = val
CPS3rd = val
T      = val
#~P      = val
P      = val - 1000
H      = val
X      = val
#~X      = (log10(1/VAL) + 3 )*50

