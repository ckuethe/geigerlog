## geigerlog.cfg - The GeigerLog configuration file

###############################################################################
##    This file is part of GeigerLog.
##
##    GeigerLog is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    GeigerLog is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with GeigerLog.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

#__author__          = "ullix"
#__copyright__       = "Copyright 2016, 2017, 2018, 2019, 2020, 2021, 2022"
#__credits__         = [""]
#__license__         = "GPL3"

# Usage:
# All lines beginning with '#' are comments and will be ignored
#
# The structure is:
#       [Section]
#       # comment
#       # Options:  value1 | value2 | ...
#       # Default = value
#       parameter = value
#
# NOTE: non-acceptable values will be silently ignored, and replaced with
#       defaults, but a debug message will be printed to the terminal and log file
#
# NOTE: There MUST NOT be more than one entry per parameter, or an error
#       will be shown, and the program ends!
#
# NOTE: Exact Capitalization required !!!!
#
# NOTE: Don't need an option? Do NOT delete, leave as is.
#
#
# EDITING NOTE:
# If the percent-sign ('%') is to be used anywhere (not recommended), it
# must be entered in duplicate! So, e.g. in a password, having a single '%':
#      WRONG:   my%password
#      RIGHT:   my%%password
# The end result in GeigerLog will be a single '%' only: 'my%password'
# (a consequence of Python's string formatting)



[Logging]
# LOGCYCLE:
# GeigerLog's logging cycle in seconds. Can be changed in GeigerLog
#
# Option auto defaults to 3. Any entry less than 0.1 will be replaced with 3.
#
# Options:    auto | <any number 0.1 or greater>
# Default   = auto
#logCycle    = auto
logCycle    = 1


[Folder]
# DATA DIRECTORY:
# A relative path will be relative to the built-in default data folder.
# It must be given as:
# in Linux:     beginning WITHOUT slash ('/')
# in Windows:   beginning WITHOUT drive name (e.g. 'c:') AND
#               beginning WITHOUT backslash ('\') or slash ('/')
#
# An absolute path must be given as:
# in Linux:     beginning WITH slash ('/')
# in Windows:   beginning WITH drive name (e.g. 'c:')
#
# Option auto defaults to folder 'data' as subdirectory to the GeigerLog folder
#
# Options:   auto | <any folder name NOT ending with slash>
# Default  = auto
data       = auto


[Defaults]
# TUBE SENSITIVITY:
# Tube sensitivities are in units of CPM / (µSv/h), specified individually per
# tube. If none is given, then defaults will be used.
#
# A list of some tubes and their known or claimed sensitivities is shown in the
# GeigerLog manual in chapter: Appendix G – Calibration.
#
# NOTE: beginning with GeigerLog 1.0 the use of 'Sensitivity' for the conversion
#       between dose rate in CPM and dose rate in µSv/h has been implmented.
#       Sensitivity is the INVERSE of the previously used 'calibration factors'!
#       This brings GeigerLog in line with international conventions.
#       see GeigerLog manual Appendix G – Calibration.
#           old units:  µSv / h / CPM       named: 'calibration factor'
#           new units:  CPM / (µSv / h)     named: 'sensitivity'
#           conversion: new = 1 / old       154 CPM/(µSv/h)  =  1/(0.0065 µSv/h/CPM)
#           Example:    tube M4011: old units: calibration factor = 0.0065 µSv/h/CPM
#                                   new units: sensitivity        = 154    CPM/(µSv/h)
#
#       The conversion of dose rate from CPM or CPS to µSv/h and vice versa becomes:
#       - from CPM:
#           Dose rate [µSv/h] = Dose rate [CPM]    /  Sensitivity [CPM/(µSv/h)]
#           Dose rate [CPM]   = Dose rate [µSv/h]  *  Sensitivity [CPM/(µSv/h)]
#       - from CPS:
#           Dose rate [µSv/h] = Dose rate [CPS]    /  Sensitivity [CPM/(µSv/h)]  *  60
#           Dose rate [CPS]   = Dose rate [µSv/h]  *  Sensitivity [CPM/(µSv/h)]  /  60
#
#       The numbers will be rounded to leave no more than three signifcant digits.
#
# All tubes might belong to one single counter, or each may belong to a different
# one, or any other mix. This is defined by mapping the respective variables to
# the devices.
#
# Option auto defaults to these values:
#    DefaultSensDef = 154.0      # the Default tube,    used for CPM, CPS
#    DefaultSens1st = 154.0      # the 1st tube,        used for CPM1st, CPS1st
#    DefaultSens2nd =   2.08     # the 2nd tube,        used for CPM2nd, CPS2nd
#    DefaultSens3rd = 154.0      # the 3rd tube,        used for CPM3rd, CPS3rd
#
# Entered values 0 (zero) or negativ will be changed to defaults.
#
# Options:          auto | <any positive number>
# Default:        = auto
DefaultSensDef    = auto
DefaultSens1st    = auto
DefaultSens2nd    = auto
DefaultSens3rd    = auto



[Network]
# SSID and PASSWORD for your local WiFi network
#   SSID:     max: 32 ASCII character:  123456789:123456789:123456789:12
#   Password: max: 63 ASCII character:  pp3456789:pp3456789:pp3456789:pp3456789:pp3456789:pp3456789:pp3
#
WiFiSSID     = mySSID
WiFiPassword = myPassword



[Graphic]
# MOVING AVERAGE:
# in sec; 60 sec = 1 min is adequate for seeing CPS recorded data as CPM.
#
# Options:      <any number equal or greater than 1>
# Default     = 60
MovingAverage = 60



[Plotstyle]
# If your plot does not come out as expected, check the geigerlog.proglog file
# for messages; you may have set anything unrecognizeable.

# LINEWIDTH:
# The width of the line in points >= 0. A width of 0 (zero) makes the line
# invisible.
#
# Options:    <any number greater or equal to 0 (zero)>
# Default   = 1
linewidth   = 1
# linewidth   = 2

# MARKERSYMBOL:
# See allowed symbols at: https://matplotlib.org/stable/api/markers_api.html
#
# Options:     "o" (circle)  | "s" (square) | "p" (pentagon) | "*" (star) |
#              "h" (hexagon) | "+" (plus)   | "x" (x)        | "D" (diamond)
# Default    = o (circle = small cap o, like in oscar)
markersymbol = o

# MARKERSIZE:
# The size of the marker for a datapoint. A marker size of x has the same
# diameter as a line of width x is wide, i.e. the marker would not be
# visible on the line!
#
# GeigerLog reduces the markersize with increasing number of data points. Here
# you specify the starting size. i.e. when only a single data point is shown.
#
# Options:    <any number greater or equal to 0 (zero)>
# Default   = 15
markersize  = 15



[Window]
# HiDPI MONITORS
# High-Resolution Monitors of size 4k and 8k are becoming affordable, but
# represent a challenge for a lot of software. Details in the GeigerLog manual.
#
# This is work-in-progress and may need custom modifications if the auto
# settings do not work well (enough).

# HiDPIactivation
# This option should not give problems on any system.
#
# A known exception is the Raspberry 4 system (status August 2020), where the
# setting must be 'no' or the screen will be distorted and GeigerLog difficult
# to use.
#
# Option auto defaults to 'yes'
#
# Options:         auto | yes | no
# Default        = auto
HiDPIactivation  = auto

# HiDPIscaleMPL
# This compensates any HiDPI scaling for the graphs generated by
# matplotlib. It may not work in all cases.
#
# For a FullHd screen the 'scaling' set in the operating system is typically 100%.
# Any different scaling must be compensated by HiDPIscaleMPL.
#
# For a HiDPI screen the scaling maybe 150%, 200%, 300%, or 400%. Numbers
# different from this list may result in problems in all software!
#
# If the 'auto' option does not give satisfactory results, try these settings:
#   scaling: 150%     ->  HiDPIscaleMPL = 70
#   scaling: 200%     ->  HiDPIscaleMPL = 50
#   scaling: 300%     ->  HiDPIscaleMPL = 33
#   scaling: 400%     ->  HiDPIscaleMPL = 25
# and modify until you find a satisfactory setting. Floating point values ok.
#
# Option auto defaults to a value calculated internally, which may or may not be
# appropriate.
#
# Options:      auto | <any number greater than zero>
# Default     = auto
HiDPIscaleMPL = auto

# WINDOW WIDTH AND HEIGHT:
# The window is positioned at the top right corner; Dimensions in pixel.
# Depending on Window manager and custom configuration, the default may not
# fit. Change to adapt for your screen and settings.
#
# Default assumes 1366x768 with 2 panels of height 24 and std window bar
#
# Options:         <any positive number>
# Default width  = 1366
#         height = 720
windowWidth      = 1366
windowHeight     = 720

# WINDOW SIZE:
# window size can be auto or maximized. On auto it will be tried to set to
# width x height as defined above. On maximized the window will be maximized.
#
# Option auto defaults to not-maximized
#
# Options:   auto | maximized
# Default  = auto
windowSize = auto

# WINDOW STYLE:
# The style determines Look & Feel. The default style is determined by the
# system itself. See GeigerLog manual, chapter: Appendix A – Look & Feel
#
# Option auto defaults to the style selected by the operating system
# If an unavailable style is set, then the default is used.
#
# Options:    auto | <see manual; correct capitalization required>
# Default   = auto
windowStyle = auto


[Manual]
# Manual NAME:
# Filename of the GeigerLog manual included with the code.
#
# Option auto defaults to the first found local file with a filename beginning
# with 'GeigerLog-Manual'. If none found, GeigerLog looks online.
#
# Options:   auto | <full name like: 'GeigerLog-Manual-v1.0.pdf'>
# Default  = auto
ManualName = auto


[MonServer]
# MonServer will serve web pages to support monitoring GeigerLog with remote
# devices, like a smartphone.
#
# MonServer Autostart
# You can choose to autostart the MonServer by setting this option to yes,
# or to require manual activation by setting it to no
#
# Options:           yes | no
# Default          = yes
MonServerAutostart = yes


# MonServer Port
# While the MonServer's IP is autodetected, port numbers must be given. They
# must be in the range of 1024 ... 65535. They can be changed during a run.
#
# Option auto default to 8008
#
# Options:      auto | <any number from 1024 ... 65535, including>
# Default     = auto
MonServerPort = 8008


# MonServer REFRESH
# This sets the refresh timings for the web pages Monitor, Data, Graph. The
# numbers give the seconds after which the site will be refreshed. Numbers
# must be separated by comma.
#
# Option auto defaults to 1, 10, 3
#
# Options:         auto | < <Monitor Refresh> , <Data Refresh> , <Graph Refresh> >
# Default:         auto
MonServerRefresh = auto



# DOSERATE THRESHOLDS
# Set the threshold values for the Web Monitor gauge transition safe to
# caution (green to yellow), and caution to danger (yellow to red).
#
# For reasons to chose these levels see GeigerLog manual, chapter:
# "On what grounds do we set the radiation safety levels?"
#
#   Low         = 0.9;        # 0.9 µSv/h (transition green to yellow)
#   High        = 6.0;        # 6.0 µSv/h (transition yellow to red)
#
# Options auto defaults to: 0.9, 6.0
# NOTE: The 1st number must be greater than zero, and the 2nd number must
# be greater than 1st, or both will be reset to default.
#
# Options:             auto | < <1st: any number greater 0> , <2nd: any number greater 1st> >
# Default            = auto
DefDoseRateThreshold = auto



[Worldmaps]
# Currently only the GQ operated website http://www.gmcmap.com  is supported.
# To use it, you have to register there and will obtain:
#   - a UserID      (probably 5 digits,    like: 01234)
#   - a CounterID   (probably 11 digits    like: 12345678901)
#
# WEBSITE and page
# GQ's gmcmap website "http://www.gmcmap.com" and ASP (Active Server Pages) file
# "log2.asp" will be combined with the data to form a typical command like:
# http://www.gmcmap.com/log2.asp?AID=01234&GID=12345678901&CPM=44&ACPM=46&uSV=0.30
# You can use it in any browser to upload any numbers, irrespective of the presence
# of a counter or the numbers being measured. They could be a complete fake!
#
# Website and asp file are the same as in the counter's default config.
# NOTE: the website name MUST NOT be preceded with 'http://'
#
# Options:            <website and asp file>
# Default: Website  = www.gmcmap.com
# Default: URL      = log2.asp
gmcmapWebsite       = www.gmcmap.com
gmcmapURL           = log2.asp

# GMCMAP USER ID and GMCMAP COUNTER ID
# For testing purposes you can leave both user and counter ID empty. The
# gmcmap server will then reject any attempt to upload data with the
# response:     Error! User not found.ERR1
#
# Options:            <anything; but valid is only what you got in registration>
# Default           = <empty>
# gmcmapUserID        =
# gmcmapCounterID     =
gmcmapUserID        = anyUserId
gmcmapCounterID     = anyCounterID

# PERIOD
# Minutes the counter will wait before uploading next values. The
# fastest is 1 min.
#
# Option auto will default to the GMC devices's default of 2.
#
# Options:            auto | <any integer number greater 0 (zero) >
# Default           = auto
# gmcmapPeriod        = auto
gmcmapPeriod        = 1

# WIFI SWITCH
# Switching WiFi of the counter ON or OFF (provided counter has WiFi)
#
# Options:            ON | OFF
# Default           = ON
gmcmapWiFiSwitch    = ON


[ValueScaling]
# Allows to scale the data with a math formula. The formula may include
# math functions. The scaled data will be saved, not the original data!
# see GeigerLog manual chapter: ValueScaling and GraphScaling
#
# As example:
#   A temperature sensor could have a known offset and read 0.3 °C too
#   high. This could be correctd by setting: Temp = VAL - 0.3
#
# Option:     val | <math formula> | <empty>
# Default:    val
#
# If 'val' is the only thing entered, or <empty> (nothing entered), then
# no modification will be applied, and the original value will be kept.
#
CPM    = val
CPS    = val
CPM1st = val
CPS1st = val
CPM2nd = val
CPS2nd = val
CPM3rd = val
CPS3rd = val
Temp   = val
Press  = val
Humid  = val
Xtra   = val


[GraphScaling]
# This does ONLY change how the variable is plotted; it does NOT change the
# value of the variable as saved, different from the 'ValueScaling' case above!
#
# As example:
#   The Air Pressure, which is mostly around 1000 +/- 30 hPa, will be
#   plotted as: Press = Press - 1000 to better fit on the ambient scale
#
# Option:     val | <math formula> | <empty>
# Default:    val
#
# If 'val' is the only thing entered, or <empty> (nothing entered), then
# no modification will be applied, and the original value will be kept.

CPM    = val
CPS    = val
CPM1st = val
CPS1st = val
CPM2nd = val
CPS2nd = val
CPM3rd = val
CPS3rd = val
Temp   = val
# Press  = val - 1000
Press  = val
Humid  = val
Xtra   = val


#
#
# DEVICES
#
#

[GMCDevice]
# This is valid for all GMC Geiger counter devices. The specific version of the
# counter will be auto-discovered.
#
# GMC ACTIVATION
# to use (yes) or not use (no) a GMC counter.
#
# Options:      yes | no
# Default     = yes
# GMC_Activation = yes
GMC_Activation = no

# FIRMWARE BUGS
# GQ's firmware has bugs - no surprise for any software. What makes is bad is
# that GQ is dragging their feet when it comes to a complete disclousure of what
# the problem is, and which firmware versions are effected.
# This impacted not only GeigerLog but also their own Dataviewer software.
# So here is an attempt to allow at least for the GeigerLog user to add some
# work-arounds in casemore versions should be affected than currently known

# FIRMWARE BUGS: LOCATION BUG
# The "saving-to-memory" of the counters uses tags (special byte sequences) to
# itentify certain properties needed for the proper parsing of the data.
# Unfortunately, GQ changed the meaning of some tags when they introduced
# 3 and 4 byte storage values, making these firmwares incompatible with previous
# versions. This was reverted, but devices with that wrong firmware were sold.
# See Reply #50, 21.8.2018:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5331
#
# Option auto defaults to: GMC-500+Re 1.18, GMC-500+Re 1.21
#
# Options:        = auto | <Full Version ID>, <Full Version ID>, <Full Version ID>, ...
# Default         = auto
GMC_locationBug   = auto

# FIRMWARE BUGS: SPIR BUG:
# See the GeigerLog manual for an explanation of the firmware bugs.
#
# Option auto uses these device specific settings:
#   300  series:  no
#   300E series:  yes
#   320  series:  yes
#   500  series:  no
#   600  series:  no
#
# Options:        auto | yes | no
# Default       = auto
GMC_SPIRbugfix  = auto

# FIRMWARE BUGS: SPIRPAGE:
# The memory is organized in pages of 4k (4096) bytes. Due to firmware bugs,
# the history readout may or may not be possible in 4k pages, but only in 2k
# pages. In addition, a bugfix may have to be applied! See GeigerLog manual
# for details.
#
# Option auto uses these device specific settings:
#   300 series:  2k
#   300E series: 4k - bugfix needed!
#   320 series:  4k - bugfix needed!
#   500 series:  2k - may work also with 4k, 8k, 16k but better make sure!
#   500+ series: 4k - may work also with 8k, 16k but better make sure!
#   510 series:  2k - may work also with 4k, 8k, 16k but better make sure!
#   600 series:  2k - may work also with 4k, 8k, 16k but better make sure!
#
# Options:        auto | 2k | 4k | 8k | 16k
# Default       = auto
GMC_SPIRpage    = auto

# FIRMWARE BUGS: FAST ESTIMATE TIME:
# "Fast EstimateTime" is a configuration setting in Device GMC-500+ version
# 2.24 and likely in all other models with a firmware supporting this mode.

# This mode is active by default in its worst setting! It invokes an algorithm,
# which is not disclosed by GQ, which results in a severe distortion of all CPM
# recordings, and may even create counts when there are none.
#
# It has settings of 60, 30, 20, 15, 10 and 5 seconds, plus a 'dynamic' setting,
# which apparently simply stands for 3 seconds. The latter is the default and
# the worst setting.
#
# It looks like this algorithm is switched off at 60 seconds, therefore this
# setting is strongly recommended! GeigerLog gives a warning when a GMC counter
# is activated with this setting at anything besides 60 seconds.
#
# Option auto sets this to 60. Counter's option 'Dynamic' is 3
# Illegal options will be ignored and replaced with auto.
#
# Options:        3, 5, 10, 15, 20, 30, 60
# Default       = auto
GMC_FastEstTime = auto


# MEMORY:
# This is the memory for data storage. It is 64kB in the older devices, and
# 1 MB in the newer ones. As long as the GMC counter can be recognized,
# GeigerLog will automatically make the correct setting. If for any reason this
# needs to be changed, it can be configured here.
#
# 64kB = 2**16 =    65 536 Bytes; fixed setting
# 1MB  = 2**20 = 1 048 576 Bytes; fixed setting
# auto = either 64kB or 1MB, set by GeigerLog
#
# Option auto uses these device specific settings:
#    300 series: 64kB
#    320 series: 1MB
#    500 series: 1MB
#    600 series: 1MB
#
# Options:   auto | 64kB | 1MB
# Default  = auto
GMC_memory = auto

# CONFIGURATION MEMORY SIZE:
# This is the configuration memory, not the data storage memory! On the older
# 3XX units it was 256 bytes. On the newer 500, 600 units it is 512 bytes.
#
# Option auto uses these device specific settings:
#   300 series: 256 bytes
#   320 series: 256 bytes
#   500 series: 512 bytes
#   600 series: 512 bytes
#
# Options:       auto | 256 | 512
# Default      = auto
GMC_configsize = auto

# TUBE SENSITIVITY:
# see general discussion above under Defaults.
# Remarks specific for GMC counter:
# The GMC devices have 3 so called 'calibration points' in their firmware for a
# single tube, but all 3 points define only a single 'calibration factor'! Thus
# a linear calibration is implicitly assumed. This factor is 0.0065 µSv/h/CPM
# for all 300 and 500 series counters, even if the tube is not the original
# standard, a M4011 tube, but a different one. One would expect a different
# factor, but the same is used!
#
# With the GMC-500+ having 2 tubes, and different ones, an additional 2nd
# calibration factor is needed. GQ is herein using 2 of the 3 calibration points
# in the firmware for the 1st tube (the standard, "high-sensitivity" tube),
# and 1 for the calibration factor of the 2nd tube, the "low-sensitivity" tube,
# obviously realizing than a single calibration point suffices!
#
# This configuration entry sets the sensitivity for the Default AND the 1st tube.
# Thus irrespective of the GMC device having only a single tube, or having two tubes,
# when the count rate is called for either CPM, CPS, or for CPM1st, CPS1st, then
# the same GMC_sensitivity will be applied.
#
# Other, Non-GMC devices, can be set individually.
#
# Option auto defaults to these values:
#                Sensitivity    Calibration Factor
#                CPM/(µSv/h)    µSv/h/CPM (old units)
#   300  series:    154         0.0065
#   320  series:    154         0.0065
#   500  series:    154         0.0065
#   500+ series:    154         0.0065  for the first tube
#                  (  2.08      0.48    for the second tube, see next parameter)
#   600  series:    154         0.0065
#   600+ series:    379         0.002637
#
# Options:        auto | <any positive number>
# Default       = auto
GMC_sensitivity = auto


# TUBE SENSITIVITY 2nd TUBE:
# The GMC500+ counter has a built-in 2nd tube with lower sensitivity than the
# 1st. Its 'calibration factor' as defined by GQ is 0.194 µSv/h/CPM,
# (= 5.15 CPM/(µSv/h)). This definition is still present in the latest firmware
# version 2.24, although this factor is wrong by more than 2fold! The most
# likely value is 2.08 CPM/(µSv/h) = 0.48 µSv/h/CPM.
#
# New synchroton data by user Ikerrg may suggest a slightly higher calibration
# factor of 2.38 CPM/(µSv/h) (= 0.42 µSv/h/CPM). However, it is not known what
# the energy spectrum of the synchroton is, and given the energy dependent
# sensitivity of geiger tubes, this new value might not be valid. The true
# calibration factor remains unknown.
#
# In earlier versions of the 500+ firmware a factor of 2.56 CPM/(µSv/h)
# (=0.390 µSv/h/CPM) was given, which was actually closer to reality.
#
# This makes the 2nd tube approx. 70 times less sensitive than the 1st tube!
#
# For more details see:
# Reply #21 in: http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5148
#
# also see:
# Th and K experiments in:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5369
# sensitivity2nd = 2.14 CPM/(µSv/h) #from Th experiment Reply #1  (0.4680 µSv/h/CPM)
# sensitivity2nd = 2.02 CPM/(µSv/h) #from K experiment  Reply #10 (0.4940 µSv/h/CPM)
# sensitivity2nd = 2.08 CPM/(µSv/h) #final value,       Reply #10 (0.48 µSv/h/CPM)
#
# This configuration entry will be applied to any CPM2nd, and CPS2nd mapping.
#
# Option auto defaults to 2.08
#
# Options:            auto | <any positive number>
# Default          =  auto
GMC_sensitivity2nd =  auto


# VOLTAGE:
# This is the BATTERY voltage, NOT the ANODE voltage!
# in the 300 series the battery voltage is reported as a single byte, and the
# voltage is byte/10; e.g. a byte value of 41 is 4.1 Volt
# in the 500 and 600 series the volt is reported as a 5 byte ASCII byte string;
# e.g. b'3.76v' is 3.76 Volt
#
# Option auto uses device specific settings
#
# Options:         auto | 1 | 5
# Default        = auto
GMC_voltagebytes = auto


# ENDIANNESS:
# For the three bytes of the calibration µSv/h values the order of bytes has
# changed in the latest firmware. It is now:
#   300 series:       little-endian
#   500 / 600 series: big-endian
#
# Option auto uses these device specific settings
#
# Options:       auto | little | big
# Default:     = auto
GMC_endianness = auto

# NBYTES:
# the number of bytes returned by the CPM, CPS, CPM1st, CPM2nd, CPS1st and CPS2nd
# commands. This is 2 bytes for the older counters, and 4 bytes for the newer
# ones with firmware 1.18 or later.
#
# Options:   auto | 2 | 4
# Default  = auto
GMC_nbytes = auto

# WiFi Index:
# points to the configuration setting to be used. If the WiFi settings read out
# by GeigerLog seem to be wrong, try another index.
#
# Current settings:
#   none: 300 series (no WiFi)
#   2:    only 320Re 5.XX
#   3:    old 500er, 600er (firmware 1.x)
#   4:    new 500er, 600er (firmware 2.x)
#
# Option auto uses above settings

# Options:       auto | none | 2 | 3 | 4
# Default      = auto
GMC_WifiIndex  = auto


# VARIABLES:
# All GMC counter provide CPM and CPS readings. Only the GMC-500+ device,
# having 2 tubes installed, and with at least firmware 1.18, provides
# additional individual readings for each tube as counts per MINUTE (CPM1st
# and CPM2nd) and counts per SECOND (CPS1st and CPS2nd).
#
# The '1st' and '2nd' settings can be activated for all other GMC counters
# as well, and will not result in an error, but will provide the exact
# same as CPM or CPS!
#
# NOTE:     On the GMC-500+ both CPM and CPS are useless numbers as they are the
#           sum of both tubes: CPM=CPM1st+CPM2nd, CPS=CPS1st+CPS2nd. This is no
#           meaningful information!
#
# Option auto defaults to:
# - on all GMC counters except GMC500+:    'CPM, CPS'
# - on only GMC-500+:                      'CPM1st, CPS1st, CPM2nd, CPS2nd'
#
# Options:      auto | <any combination of CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd>
# Default     = auto
# GMC_variables = auto
GMC_variables = CPM1st, CPS1st


[GMCSerialPort]
# This is the Serial Port used by the GMC Geiger Counters.
#
# GMCSerialPort USBPORT:
# When set to auto, GeigerLog will attempt to auto-detect the port. If it fails
# you need to configure the port explicitly using the non-auto options.
#
# The name of the serial port is different in Linux and Windows, see:
# GeigerLog manual: Appendix B – Connecting Device and Com­puter using a Serial Connection
#
# Options: Linux:   auto | /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | ... and others
#          Windows: auto | COM3 | COM4 | COM12 |                       ... and others
#          Mac:     auto | /dev/tty.USBSERIAL | /dev/tty.PL2303-xxx |  ... and others
#
# Default    = auto
GMC_usbport  = auto


# GMCSerialPort BAUDRATE:
# The old GMC 300 devices had a default baudrate of 57600; the newer 320, 500 and
# 600 series have a default of 115200. The device ITSELF must have been set to
# the selected baudrate; it cannot be changed by any external program!
# see GeigerLog menu Help->Quickstart for instructions and manual
#
# GeigerLog will first try to make a connection at 115200, and if this fails
# will try a connection at 57200. If this fails also, then it will use the
# GMC_baudrate as set below. If this also fails, no connection can be made.
#
# Option auto will default to 115200
#
# Options:     auto | 57600 | 115200
# Default    = auto
GMC_baudrate = auto


# GMCSerialPort TIMEOUT (READ):
# GMC counter need some 5 ms for regular CPM or CPS calls, but those may lengthen
# to 400 ms occasionally! Downloading History may take >1000 ms!
#
# Option auto defaults to 3 sec.
#
# Enter number in sec;  1(fast) ... 10(slow)
# NOTE: any number zero or negative will be changed to Default
#
# Options:       auto | <any positive number>
# Default      = auto
GMC_timeout    = auto



# GMCSerialPort TIMEOUT WRITE:
# Writing to a GMC counter needs < 0.1 ms. I have never seen a timeout on writing.
#
# Option auto defaults to 1 sec
# NOTE: any number zero or negative will be changed to Default
#
# Options:          auto | <any positive number>
# Default         = auto
GMC_timeout_write = auto



[AudioCounter]
# Using the PC's internal default audio input (often the microphone) or a USB
# Sound Card to listen to audioclicks from a Geiger counter.
#
# The clicks must reach close to the maximum of the default audio input. The
# input amplification of the PC's sound device should be adjusted accordingly.
# See the manual for pictures

# AudioCounter ACTIVATION
# to use (yes) or not use (no) the AudioCounter
#
# Options:        yes | no
# Default       = yes
# AudioActivation = yes
AudioActivation = no


# AudioCounter DEVICE
# The audio device is specified with 2 values: 1st is input, 2nd is output.
# The available devices can be shown by running: 'python3 gdev_audio.py' in the
# GeigerLog directory. The output will be similar to this (some lines removed):
#
#   Available Sound Devices:
#      0 HDA Intel HDMI: 0 (hw:0,3), ALSA (0 in, 8 out)
#      ...
#      4 HDA Intel PCH: ALC887-VD Analog (hw:1,0), ALSA (2 in, 0 out)
#      ...
#      7 USB Audio Device: - (hw:2,0), ALSA (1 in, 2 out)
#      8 hdmi, ALSA (0 in, 8 out)
#      ...
#   * 10 default, ALSA (32 in, 32 out)
#
# Here a total of 11 (0 ... 10) devices are available. Only #4, #7, and #10 have
# inputs available. The star in the leftmost column of #10 marks the default
# device. It also has the name 'default', but it can have any other name, and
# still be the default device! Device #7 is an USB sound card, while the others
# are devices internal to this desktop computer.
#
# If a device is specified as 'None', then the system's default will be used.
# Otherwise specify its name or its number, examples:
#       None, None
#       HDA Intel PCH, 10
#       USB, hdmi
#       7, 8
# The last two lines specify the same devices in this example
#
# Option auto defaults to None, None
#
# Options:        auto | None, None | < <InputDevice Name|Number>, <OutputDevice Name|Number> >
# Default       = auto
AudioDevice     = auto


# AudioCounter LATENCY
# Can be used to finetune the AudioCounter behavior. From experience, and
# dependent on the sound card, values in sec from 0.05 ... 2.0 may be helpful.
#
# Option auto defaults to 1.0, 1.0
#
# Options:        auto | <<any number greater than zero> , <any number greater than zero>>
# Default       = auto
AudioLatency    = auto


# AudioCounter PULSEMAX
# The audio input is normally at zero, and for 16bit resolution (as used here)
# the maximum signal is thus plus/minus 32768. However, depending on operating
# system this may be seen as plus/minus 1 or any other range.
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
#
# Option auto defaults to 32768
#
# Options:        auto | <any number greater than zero>
# Default       = auto
AudioPulseMax   = auto


# AudioCounter PULSEDIR
# The audio input is normally at zero, and any pulses are either positive or
# negative. Pulses from a GMC300E+, or a SGP-001 are negative
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
#
# Option auto defaults to negative
#
# Options:        auto | negative | positive
# Default       = auto
AudioPulseDir   = auto


# AudioCounter Threshold
# If possible the audio input should be adjusted such that the Geiger pulses
# reach the negative/positive limit. The number given here sets the percentage
# of the maximum possible signal which must be reached in order to trigger a
# count. 60[%] has been a good value so far.
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
# Option auto defaults to 60
#
# Options:        auto | < a positive number less than 100>
# Default       = auto
AudioThreshold  = auto


# AudioCounter TUBE SENSITIVITY:
# To be given in units of CPM/(µSv/h), see discussion at the top at Defaults
#
# Option auto defaults to 154
#
# Options:          auto | <any positive number>
# Default         = auto
AudioSensitivity  = auto


# AudioCounter VARIABLES:
# All CPM* and CPS* are available (CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd,
# CPM3rd, CPS3rd), but only a max of 2 variables can be specified.
# If 2 variables are specified, then one must be of the M type, and one of the
# S type (per minute, per second).
#
# Option auto defaults to 'CPM3rd, CPS3rd'
#
# Options:        auto | <any combination of CPM*, CPS*, see above>
# Default       = auto
AudioVariables  = auto



[RadMonPlusDevice]
# A device from here: https://sites.google.com/site/diygeigercounter/gk-radmon
# The RM+ can act as a Geiger counter providing CPM data, and with an optional
# BME280 sensor additionally acts as an environmental monitor for Temperature,
# Pressure, and Humidity. The RM+ must be configured to send its data to an
# MQTT server. This server's IP must be made known to GeigerLog.
#
# NOTE: The server must be using protocol=mqtt.MQTTv311! The RadMon device is
# not able to connect to a server using the protocol=mqtt.MQTTv31
#
#
# The RM+ update cycle can be configured at the RM+, but it is best set to
# 60 sec for CPM readings, and with an extra of about 7 sec for reading the
# environmental sensor and sending the data, the total cycle is about 67sec.
#
# GeigerLog connects to the MQTT server for new data and logs them. GeigerLog
# can read all 4 variables. If no new data are found, the log displays empty
# values, but they won't be saved in the records. Logging/displaying/analyzing
# will not be impacted.
#
# Demonstration Mode
# A Demo-Mmode can be activated in GeigerLog, which defines my per­sonal
# RadMon+ device as active, and allows any user of GeigerLog to read genuine
# real-time data from a RadMon+.

# RadMonPlusDevice ACTIVATION
# to use (yes) or not use (no) the RadMonPlusDevice
#
# Options:        yes | no
# Default       = no
RMActivation    = no

# RadMonPlusDevice SERVERIP:
# The server IP can be either a numerical IP like "10.0.0.81" (in local network),
# or "198.41.30.241", or a URL like "mqtt.eclipse.org".
#
# NOTES: previously used server "iot.eclipse.org" is out-of-service!
#        previously used server "mqtt.eclipse.org" is out-of-service (since
#        December 12, 2020)
#
# newly chosen server: "test.mosquitto.org", see: http://test.mosquitto.org/
#
# Other IP options: https://github.com/mqtt/mqtt.github.io/wiki/public_brokers
# -  broker.hivemq.com  (tested ok, see: http://www.mqtt-dashboard.com/)
#
# Test: If you have the mosquitto clients installed try:
#       mosquitto_sub -h test.mosquitto.org -t "geigerlog/#" -v
#
# Option auto becomes "test.mosquitto.org" (IP: 5.196.95.208)
#
# Options:    auto | <IP address>
# Default   = auto
RMServerIP  = auto

# RadMonPlusDevice SERVER PORT:
# Standard port is 1883
#
# Option auto becomes 1883
#
# Options:     auto | <port number>
# Default    = auto
RMServerPort = auto

# RadMonPlusDevice SERVER FOLDER:
# This must be the same folder as defined during the setup of the RadMon+
# device. For details search for MQTT. In MQTT these folders are called 'topics'.
# CAUTION: you may get flooded with useless messages when you enter no proper
# folder!
#
# A blank (' ') is not allowed in the folder name! If no final '/' is given, it
# will be auto-added
#
# Options:        <folder as defined in your RadMon+ device, ending with '/'>
# Default       = /
# Demo-Mode:    = geigerlog/
RMServerFolder  = geigerlog/

# RadMonPlusDevice TIMEOUT:
# establishing a connection in a local network takes ~10 milliseconds, but to a
# remote server on poor connections might take several hundred milliseconds.
# To be on the safe side a timeout of 5 sec is set, as used for the serial port
# NOTE: any number zero or negative will be changed to 5
#
# Option auto defaults to 5
#
# Options:        auto | <any positive number>
# Default       = auto
# RMTimeout       = auto
RMTimeout       = 10

# RadMonPlusDevice TUBE SENSITIVITY:
# To be given in units of CPM/(µSv/h), see discussion at the top at Defaults
#
# NOTE:     the sensitivity setting existing within RadMon+ firmware is ignored.
#
# Option auto defaults to 154
#
# Options:        auto | <any positive number>
# Default      =  auto
RMSensitivity  =  auto

# RadMonPlusDevice VARIABLES:
# The RM+ can provide only CPM data, or only Temp, Press, Humid, Xtra (Temperature, Pressure,
# Humidity, RSSI) data, or all of them.
#
# The CPM values can be mapped to any of the CPM* variables. Any CPS* setting
# will be ignored.
#
# As the Temp, Press, H data come from one sensor, they are either all present or
# none, yet you can select or ignore them individually for logging.
#
# Xtra is the RSSI (WiFi strength) reported by the RadMon
#
# Option auto defaults to 'CPM3rd, Temp, Press, Humid'
#
# Options:        auto | <any combination of Temp, Press, Humid, Xtra and one of (CPM, CPM1st, CPM2nd, CPM3rd)>
# Default       = auto
# RMVariables     = auto
RMVariables     = CPM, Temp, Press, Humid


[AmbioMonDevice]
# A device in development. The AmbioMonDevice provides Geiger counter
# CPM / CPS data, and with its BME680 sensor provides environmental
# data for Temperature, Pressure, Humidity, and Air Quality.
#
# The AmbioMon Device acts as a web server and has its own IP Address.
# GeigerLog needs this address to connect to the AmbioMon Device via
# local or remote internet connection. GeigerLog can read and log all
# variables, and it can download any history stored on the AmbioMonDevice.
#
# AmbioMonDevice ACTIVATION
# to use (yes) or not use (no) the AmbioMonDevice
#
# Options:        yes | no
# Default       = no
AmbioActivation = no

# AmbioMonDevice SERVER IP:
# This must be given to GeigerLog, it cannot be auto-discovered. It can
# be numeric, like '198.41.30.241', or a domain name, like 'mydevice.com'.
#
# If you use auto, then GeigerLog will use the IP of the computer it is running
# on. See GeigerLog manual for how you can use that for a simulator device.
#
# Option auto defaults to the GeigerLog computer's IP.
#
# Options:        auto | <IP address>
# Default       = auto
AmbioServerIP   = auto
# AmbioServerIP   = 10.0.0.85

# AmbioMon Device SERVER PORT:
# The port number on which your AmbioMon Device is listening. The
# standard port for webserver is 80, but it can be any number
# from 0 ... 65535.
#
# Option auto defaults to 80.
# NOTE: any number outside the allowed range will be changed to 80.
#
# Options:        auto | <any number 0 ... 65535>
# Default       = auto
AmbioServerPort = auto

# AmbioMonDevice TIMEOUT:
# Establishing a connection in a local network takes ~10 milliseconds, but may
# take much longer and may fail. To be on the safe side a timeout of 3 sec is
# set. If this still fails, then something else may be wrong!
# NOTE: any option number zero or negative will be changed to 3
#
# Option auto defaults to 3.
#
# Options:        auto | <any positive number>
# Default       = auto
AmbioTimeout    = auto

# AmbioMonDevice TUBE SENSITIVITY:
# To be given in units of CPM/(µSv/h), see discussion at the top at Defaults
#
# Option auto defaults to 154
#
# Options:          auto | <any positive number>
# Default        =  auto
AmbioSensitivity =  auto

# AmbioMonDevice DATATPYE
# The datatype GeigerLog will request from the AmbioMon Device. Can be
# - Last : the set of values collected in the last second
# - Avg  : the average of the alues over the last minute
#
# Option auto defaults to 'Last'
#
# Options:        auto | Last | Avg
# Default       = auto
AmbioDataType   = auto

# AmbioMonDevice VARIABLES:
# The AmbioMon can provide CPM, CPS, Temp, Press, Humid, Xtra (Temperature, Pressure,
# Humidity, Air quality) data.
# The CPM / CPS values should be mapped to any of the CPM*/CPS* variables.
# As the Temp, Press, Humid, Xtra data come from one sensor, they are either all or none
# present, yet you can select or ignore them individually for logging.
#
# Option auto defaults to 'CPM, CPS, Temp, Press, Humid, Xtra'.
#
# Options:        auto | <  any combination of:
#                           Temp, Press, Humid, Xtra,
#                           <one of (CPM, CPM1st, CPM2nd, CPM3rd)>,
#                           <one of (CPS, CPS1st, CPS2nd, CPS3rd)>
#                        >
# Default       = auto
AmbioVariables  = auto



[GammaScoutDevice]
# Using a Gamma-Scout Geiger counter
# see: https://www.gamma-scout.com/unsere-produkte/
#
# GammaScoutDevice Activation
# to use (yes) or not use (no) GammaScoutDevice
#
# Options:      yes | no
# Default     = no
GSActivation  = no

# GammaScoutDevice VARIABLES:
# All Gamma Scout counter models 'Standard, 'Alert', 'Rechargeable', and
# 'Online' are supported by GeigerLog, but by the counters' hardware
# limitations the 'Online' model is the only one which allows logging.
#
# When logging is started with any of the other three, logging will be
# running, and no harm is done, but only NAN values will ever be returned,
# signalling "no data".
#
# The variables are used as:
#   CPS*   : gets the counts in whatever the interval set at the counter.
#            Caution: This interval may be changed during a run by the counter itself!
#   CPM*   : gets CPM as CALCULATED from CPS* and Xtra
#   Xtra   : gets the interval over which each value of CPS* is counted
#
# Option auto defaults to 'CPM3rd, CPS3rd, Xtra'
#
# Options:       auto | < < One of CPM, CPM1st, CPM2nd, CPM3rd >,
#                         < One of CPS, CPS1st, CPS2nd, CPS3rd >,
#                         Xtra
#                       >
# Default      = auto
GSVariables    = auto

# GammaScoutDevice TUBE SENSITIVITY:
# To be given in units of CPM/(µSv/h), see discussion at the top at Defaults.
# The tube in all current Gamma-Scout devices is a LND712, for which the tube
# manufacturer has given a sensiotivity of 108 CPM / (µSv/h).
#
# The sensitivity is valid only for the CALCULATED CPM* values, see more under
# GammaScoutDevice VARIABLES
#
# Option auto defaults to 108
#
# Options:        auto | <any positive number>
# Default      =  auto
GSSensitivity  =  auto


[GammaScoutSerialPort]
# This is the Serial Port used for all GammaScout devices
#
# GammaScoutSerialPort USBPORT:
# When set to auto, GeigerLog will attempt to auto-detect the port. If it fails
# you need to configure the port explicitly using the non-auto options.
#
# The name of the serial port is different in Linux and Windows, see:
# GeigerLog manual: Appendix B – Connecting Device and Com­puter using a Serial Connection
#
# Options: Linux:   auto | /dev/ttyUSB0 | /dev/ttyUSB1 | dev/ttyS91 |  ... and others
#          Windows: auto | COM3 | COM4 | COM12 |                       ... and others
#          Mac:     auto | /dev/tty.USBSERIAL | /dev/tty.PL2303-xxx |  ... and others
#
# Default  = auto
GSusbport  = auto

# GammaScoutSerialPort BAUDRATE:
# depends on GS Device, but factory-fixed per device. Check your counter specs
#
# old counter   Firmware < 6.00:            2400
# current       6.00 <= Firmware  < 6.90:   9600 # GammaScout Standard, Alert, Rechargeable
# latest        Firmware  >= 6.90:        460800 # GammaScout Online
#
# Options:    2400 | 9600 | 460800
# Default   = 9600
# GSbaudrate  = 9600
GSbaudrate  = 460800

# GammaScoutSerialPort TIMEOUT (READ):
# in seconds; for better speed try small number first; 1(fast) ... 10(slow)
# choose greater number when reading problems occur
# NOTE: some responses of Gamma-Scout take almost 1 sec, timeout setting must
#       be well above the 1 sec limit!
#
# Any option number zero or negative will be set to Default
#
# Options:   <any positive number>
# Default  = 3
GStimeout  = 3

# GammaScoutSerialPort TIMEOUT WRITE:
# in seconds; choose greater number when writing problems occur
# NOTE: any number zero or negative will be set to Default
#
# Options:        <any positive number>
# Default       = 1
GStimeout_write = 1


[I2C]
# Using I2C sensors connected via a dongle (specified next)
#
# see also Articles: (https://sourceforge.net/projects/geigerlog/files/Articles/)
#   "Review of USB-To-I2C Dongles as used by GeigerLog"
#   "Measuring CO2 with SCD30, SCD41, and MiniMon"
#
# I2C Activation
# to use (yes) or not use (no) an I2C Device
#
# Options:      yes | no
# Default     = no
I2CActivation = no


# I2C DONGLE:
# GeigerLog supports these three dongles for the connection of I2C sensors:
# Best performance is achieved with the USB-ISS dongle.
# - Dongle: ISS:    USB-ISS      - best - connected as USB-To-Serial device
# - Dongle: ELV:    ELV USB-I2C  - ok   - connected as USB-To-Serial device
# - Dongle: IOW:    IOW24-DG     - poor - connected as native USB device under Linux
#
# NOTE: ISS and ELV dongle are supported on all systems Linux, Windows, Mac, ...
#       The IOW dongle is currently supported only on Linux!
#
# Options:   ISS | ELV | IOW
# Default  = ISS
I2CDongle  = ISS
# I2CDongle  = ELV
# I2CDongle  = IOW


# I2C SerialPort:
# This is the Serial Port used by these 2 dongles: ISS and ELV.
# The dongle IOW connects as native USB device and doesn't need this configuration.
#
# When set to auto, GeigerLog will attempt to auto-detect the port. If it fails
# you need to configure the port explicitly using the non-auto options.

# The name of the serial port is different in Linux and Windows, see:
# GeigerLog manual: Appendix B – Connecting Device and Com­puter using a Serial Connection
#
# Options: on Linux:   auto | /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | /dev/ttyACM0 ... and others
#          on Windows: auto | COM3 | COM12 |                                ... and others
#          on Mac:     auto | /dev/tty.USBSERIAL | /dev/tty.PL2303-xxx |    ... and others
#
# NOTE:    with x = 0, 1, 2, 3, ...
#          on Linux   the ELV USB-I2C       will be using /dev/ttyUSBx ports by default
#                     the USB-ISS           will be using /dev/ttyACMx ports by default
#          on Windows both                  will be using COMx ports by default
#
# Default  = auto
I2Cusbport = auto


# I2C SENSORS and I2C Variables
# The following sensors are supported in GeigerLog. They deliver from 1 to 3
# values of the type listed:
#
#   Sensor    No. of Values     Type of values (in order of delivery by the sensor)
#               measured
#   -------------------------------------------------------------------------------
#   LM75:           1           Temperature
#   BME280:         3           Temperature, (Barometric-)Pressure, Humidity
#   SCD30:          3           CO2 (by NDIR), Temperature, Humidity
#   SCD41:          3           CO2 (by Photoacoustic), Temperature, Humidity
#   TSL2591:        2           Intensity Visible Light, Intensity Infrared Light
#
# A configuration is needed which defines 3 settings per sensor, separated by comma:
#   1. Activate the sensor:                             <yes | no>
#   2. The sensors's I2C address in your hardware:      <address as hex value, like: 0x48>
#   3. Mapping of sensor values to GeigerLog variables: see below
#
# 1.Activation
#   If activated, the sensor will be used by GeigerLog. If not, it does not hurt to leave
#   it in the circuitry, and it may also be left powered, but GeigerLog won't talk to it.
#
# 2.I2C Address
#   The address is determined by the sensor manufacturer. It will be in the space of
#   0x00 ... 0xFF (128 addresses). Devices may allow only a single address or multiple,
#   depending on hardware. Sometimes the user can modify it, sometimes not.
#
#   Possible Addresses for the supported sensors:
#       LM75:    0x48 | 0x49 | 0x4A | 0x4B | 0x4C | 0x4D | 0x4E | 0x4F
#       BME280:  0x76 | 0x77
#       SCD30:   0x61
#       SCD41:   0x62
#       TSL2591: 0x29
#
# 3.Mapping of sensor values to GeigerLog's variables
#   The sensor values will be delivered from each sensor in the order shown in the table
#   above. Those values need to be mapped to GeigerLog's variables. Any combination of
#   GeigerLog's variables can be used in any order. However, no more variables can be set
#   as the sensor can deliver values; any additional ones will be ignored.
#
#   GeigerLog will skip a variable if the word None is used instead of a variable name.
#
#   Examples:
#   I2CSensorLM75    = yes, 0x48, CPM2nd
#                        The LM75 sensor will be used at I2C address 0x48, and its
#                        Temperature value will be mapped to GeigerLog variable CPM2nd
#   I2CSensorSCD41   = yes, 0x62, CPM, None, CPS1st, Xtra
#                        The SCD41 sensor will be used at I2C address 0x62 (its only one),
#                        and its 3 output values are handled like this:
#                        - its CO2 value is mapped to GeigerLog variable CPM,
#                        - its Temperatur value is skipped, i.e. not registered at all,
#                        - its Humidity value is mapped to CPS1st,
#                        - Xtra is ignored as the sensor can deliver only 3 values.
#
# Options:  < yes | no > , <Sensor Addr in hex> , <any combination of None,
#                                                  CPM, CPS, CPM1st, CPS1st,
#                                                  CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                                                  Temp, Press, Humid, Xtra>
#
# Defaults:
# I2CSensorLM75    = no,  0x48, CPM2nd                  # Temperature
# I2CSensorBME280  = no,  0x76, Temp, Press, Humid      # Temperature, Pressure, Humidity
# I2CSensorSCD30   = no,  0x61, CPM, CPM1st, CPS1st     # CO2, Temperature, Humidity
# I2CSensorSCD41   = no,  0x62, CPM, CPM1st, CPS1st     # CO2, Temperature, Humidity
# I2CSensorTSL2591 = no,  0x29, CPM3rd, CPS3rd          # Visible Light, Infrared Light

# TIP: the presence of "y" in the first column makes it a "yes"; its absence a "no"
I2CSensorLM75      =  n, 0x48, CPS3rd
I2CSensorBME280    =  n, 0x76, Temp,   Press,   Humid
I2CSensorSCD30     = yn, 0x61, CPM1st, CPS1st
I2CSensorSCD41     = yn, 0x62, CPM2nd, CPS2nd
I2CSensorTSL2591   =  n, 0x29, CPM3rd, Xtra



[LabJackDevice]
# NOTE: verfied to work on Linux; it may work on Mac, but not tested
#       Windows will not work; it needs a different installation of drivers
#
# A device of the LabJack category from company LabJack:  https://labjack.com/
# The LabJack device is connected via USB bus - true USB, NOT a USB-to-Serial!
# Currently only the U3 Series is supported, https://labjack.com/products/u3
#
# To use the LabJack device, you may need additional installations; see header
# of file gdev_labjack.py
#
# LabJackDevice ACTIVATION
# to use (yes) or not use (no) LabJack
#
# Options:     yes | no
# Default    = no
LJActivation = no

# LabJackDevice EI1050 PROBE ACTIVATION
# to use (yes) or not use (no) the Temperature and Humidity LabJack probe EI1050
#
# Options:           yes | no
# Default          = no
LJEI1050Activation = yes

# LabJackDevice VARIABLES:
# The current GeigerLog software supports these measurements:
# 1. The measurement of up to 8 voltages on the pins FIO0 ... FIO7, with the
#    connections made via "LJTick-Divider4", which allow voltages  +0 ... +10V.
# 2. The measurement of Temperature and Humidity with the external probe EI1050
#    https://labjack.com/support/datasheets/accessories/ei-1050
#    https://labjack.com/accessories/ei1050-digital-temperaturehumidity-probe
# 3. The measurement of the internal temperature of the LabJack U3
#
# The mapping to the GeigerLog variables is as follows: (all vars except Press)
# ad 1: The 8 voltages are mapped to CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd,
#       CPM3rd, CPS3rd,
# ad 2: Temperature and Humidity are mapped to the Temp and Humid, resp.
# ad 3: U3 Internal Temperature is mapped to Xtra
#
# Option auto defaults to 'CPM, CPS, CPM1st, CPS1st'
#
# Options:    auto | <any combination of CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd,
#                     CPM3rd, CPS3rd, Temp, Humid, Xtra>
# Default   = auto
LJVariables = auto



[MiniMon]
# MiniMon is a CO2 monitor for indoor use available from multiple distributors,
# e.g. also from TFA Drostman, https://www.amazon.de/gp/product/B00TH3OW4Q/
# Also: https://www.co2meter.com/products/co2mini-co2-indoor-air-quality-monitor
# The USB ID by lsusb is:     ID 04d9:a052 Holtek Semiconductor, Inc.
#
# MiniMon ACTIVATION
# to use (yes) or not use (no) the MiniMon device
#
# Options:          yes | no
# Default         = yes
MiniMonActivation = no

# MiniMon OSDevice
# MiniMon will appear in the OS as a hidraw device (a raw HID - Human Interface
# Device). Use ls -al /dev/hidraw* to list devices as: /dev/hidraw1,
# /dev/hidraw2, /dev/hidraw3, etc.. It is recommended to set a udev rule to
# make the device always show as e.g. /dev/minimon. See header of file
# gdev_minimon.py for details.
#
# Option auto defaults to /dev/minimon
#
# Options:         auto | < a hidraw device like /dev/hidraw3 >
# Default        = auto
MiniMonOS_Device = auto

# MiniMon INTERVAL:
# The Temp, Humid, Xtra values change only very slowly. In order to save
# recording space, a record will only be saved if at least one variable
# value has changed. As this may take several minutes, the interval set
# here forces a saving if none has occured for interval seconds.
#
# Option auto defaults to 60 (seconds).
#
# Options:        auto | <any number greater zero>
# Default       = auto
MiniMonInterval = auto

# MiniMon VARIABLES:
# Temp (for Temperature) and Xtra (for CO2) are available as standard. Some
# devices also have Humid (for Humidity) available. The TFA Drostmann device
# mentioned above does NOT have the humidity sensor.
#
# If Humid is specified but there is no sensor for it, then Humid will always
# be 0 (zero).
#
# Option auto defaults to 'Temp, Xtra'
#
# Options:         auto | <any combination of Temp, Humid, Xtra>
# Default        = auto
MiniMonVariables = auto



[Simul]
# Simul is a synthetic Poisson-Number generator to simulate a true
# Geiger counter.
#
# Simul ACTIVATION
# to use (yes) or not use (no) the Simul Device
#
# Options:        yes | no
# Default       = yes
SimulActivation = no

# Simul MEAN
# The Poisson generator needs the CPS mean as its only parameter.
# CPM is calculated from CPS as the sum of the last 60 sec.
#
# A typical background count for a M4011 or SBM20 tube is CPM = 18,
# which gives: CPS = 18 / 60 = 0.3. This is used as default setting.
#
# Option auto defaults to 0.3
#
# Options:     auto | <any number greater 0 (zero)>
# Default    = auto
SimulMean    = auto

# Simul SENSITIVITY:
# To mimic a fictitious tube of the Simul counter. To be given in units
# of CPM/(µSv/h), see discussion at the top at Defaults.
#
# Option auto defaults to 154
#
# Options:          auto | <any positive number>
# Default         = auto
SimulSensitivity  = auto

# Simul DEADTIME:
# NOTE: currently not used - reserved for later functionality!
#
# The deadtime of the fictitious tube. To be given in µs (micro-seconds).
#
# Typical Geiger tube deadtimes range from 50 ... 200 µs. GQ is rating
# its M4011 tube with a deadtime of 120µs. This may not be correct.
# The true deadtime might well be larger, perhaps as large as 200µs, see:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=4598
#
# NOTE: CPS=7000 is limit for deadtime=120 -> every 10th count fails
#
# Option auto defaults to 120
#
# Options:       auto | <any non-negative number>
# Default      = auto
SimulDeadtime  = auto

# Simul VARIABLES:
# Only the variables CPM and CPS are supported.
#
# Option auto defaults to 'CPM, CPS'
#
# Options:       auto | <any combination of CPM, CPS>
# Default      = auto
SimulVariables = auto



[Manu]
# Manu is a device which allows to enter numeric values manually.
# They will be saved, handled and shown just like any other data.
#
# MANU ACTIVATION
# to use (yes) or not use (no) the Manu device
#
# Options:       yes | no
# Default      = no
ManuActivation = no

# MANU TUBE SENSITIVITY:
# (in case that data from an external GM tube are entered; then at least one
# variable should be of CPM* or CPS* type). To be given in units of CPM/(µSv/h),
# see discussion at the top at Defaults.
#
# Option auto defaults to 154
#
# Options:        auto | <any positive number>
# Default       = auto
# ManuSensitivity = auto
ManuSensitivity = 99

# MANU RECORD STYLE
# Determines the treatment of the entered data, Point or Step:
#
# Point: A single value is entered. Upon entering a subsequent value, a
#        straight line will be drawn to connect the two points.
#        Good for ambient values changing "by itself", like temperature,
#        sunlight, or CO2.
#
# Step:  A value is entered and is reused in all following cycles until
#        a new value is entered. This results in a horizontal line and
#        stepwise changes between points.
#        Good for values which have to be changed intentionally, like
#        distance of radioactive source from Geiger counter, or applied
#        anode voltage.
#
# Option auto defaults to point
#
# Options:        auto | point | step
# Default       = auto
ManuRecordStyle = auto

# MANU VARIABLES:
# Choose from N = 1 ... 12 variables out of of all.
#
# Option auto defaults to 'Temp, Press, Humid, Xtra'. On wrong input, entries
# will be reset to auto.
#
# Options:        auto | <any combination of up to 12 items out of:
#                         CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                         Temp, Press, Humid, Xtra>
# Default       = auto
# ManuVariables   = auto
# ManuVariables   = Temp, Press
# ManuVariables   = Humid, Xtra
# ManuVariables   = CPM3rd, Humid, Xtra, Temp, Press, CPM2nd, CPS2nd, CPM3rd, CPS3rd, CPM, CPS, CPM1st, CPS1st,
ManuVariables   = CPM3rd



[WiFiServerDevice]
# A WiFiServer device is an external device one which acts as web server and
# sends data only upon a request from GeigerLog. See details and data format
# in the GeigerLog manual.
#
# WiFiServerDevice ACTIVATION
# to use (yes) or not use (no) the WiFiServerDevice
#
# Options:             yes | no
# Default            = no
WiFiServerActivation = no

# WiFiServerDevice SERVER IP:
# The IP address from your WiFiServer Device. It can be numeric
# like '198.41.30.241', or a domain name like 'mydevice.com'.
#
# The IP of such an external device cannot be discovered by GeigerLog,
# you need to provide it! If you use auto, then GeigerLog will use the
# IP of the computer it is running on. See GeigerLog manual for
# how you can use that for a simulator device.
#
# Option auto defaults to the GeigerLog computer's IP.
#
# Options:     auto | <IP address>
# Default    = auto
WiFiServerIP = auto

# WiFiServerDevice SERVER PORT:
# The port number on which your WiFiServer Device is listening. The
# standard port for webserver is 80, but it can be any number
# from 0 ... 65535.
#
# Option auto defaults to 80.
# NOTE: any number outside the allowed range will be changed to 80.
#
# Options:       auto | <any number 0 ... 65535>
# Default      = auto
WiFiServerPort = auto

# WiFiServerDevice FOLDER:
# The folder on the external WiFiServer device, which GeigerLog
# will call, like:  IP:Port/folder
#
# Do not include slashes ('\', '/'); they will be removed.
#
# Option auto defaults to DemoWiFiServer
#
# Options:         auto | <anything qualifying as folder name; no slashes>
# Default        = auto
WiFiServerFolder = auto

# WiFiServerDevice TIMEOUT:
# Establishing a connection in a local network takes ~10 milliseconds,
# but may take much longer and may fail. To be on the safe side a
# timeout of 3 sec is set. If this still fails, then something else
# may be wrong!
#
# Option auto defaults to 3.
# NOTE: any option number zero or negative will be changed to 3
#
# Options:          auto | <any positive number>
# Default         = auto
WiFiServerTimeout = auto

# WiFiServerDevice TUBE SENSITIVITY:
# To be given in units of CPM/(µSv/h), see discussion at the top at Defaults
#
# Option auto defaults to 154
#
# Options:              auto | <any positive number>
# Default             = auto
WiFiServerSensitivity = auto

# WiFiServerDevice DATATPYE
# The datatype GeigerLog will request from the WiFiServer Device. Can be:
# - Last : the set of values collected last
# - Avg  : the average of the values over the last minute
#
# Option auto defaults to 'Last'
#
# Options:           auto | Last | Avg
# Default          = auto
WiFiServerDataType = auto

# WiFiServerDevice VARIABLES:
# The external WiFiServer Device may provide from only one to all of the
# variables which GeigerLog can handle.
#
# Option auto defaults to 'CPM, CPS, Temp, Press, Humid'.
#
# Options:            auto | <any combination of:
#                              CPM, CPS, CPM1st, CPS1st,
#                              CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                              Temp, Press, Humid, Xtra
#                            >
# Default           = auto
# WiFiServerVariables = auto
WiFiServerVariables = CPM, CPS, Temp, Press, Xtra
# WiFiServerVariables =  CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd, Temp, Press, Humid, Xtra



[WiFiClientDevice]
# A WiFiClient device is an external device which acts as a "browser" and sends
# "download requests" to GeigerLog's internal web server. These requests wrap
# the data thereby uploading them to GeigerLog. WiFiClient devices transmit
# data on their own schedule; GeigerLog waits for their calls.
#
# Examples for such WiFiClient devices are the WiFi-equipped GMC counter when
# sending their data to the Radiation World Map. With some extra effort the
# output of those counters can be redirected into GeigerLog. See the GeigerLog
# manual for details.
#
# WiFiClientDevice ACTIVATION
# to use (yes) or not use (no) the WiFiClientDevice
#
# Options:             yes | no
# Default            = no
WiFiClientActivation = no

# WiFiClientDevice IP ADDRESS:
# The IP address associated with the computer, on which GeigerLog runs, is
# auto-detected by GeigerLog. You cannot set it separately.

# WiFiClientDevice SERVER PORT:
# The port to call your server. Only port numbers 1024 ... 65535 are accepted.
#
# Option auto defaults to 8000
#
# Options:             auto | <a number from 1024 ... 65535, including>
# Default            = auto
WiFiClientPort = auto

# WiFiClientDevice TYPE
# The default type is "GENERIC" which is the most universal type and means
# that the WiFiClient device can upload up to 12 variables as explained
# below in WiFiClientDevice VARIABLES.
#
# The alternative type is "GMC", by which some adjustments are made and some
# restrictions applied so that WiFi-equipped GMC counters can be used as
# WiFiClient Device.
#
# Calls from GMC counter will be rejected when "GENERIC" is set, and vice-versa.
#
# Any option other than GMC will default to GENERIC.
#
# Options:       GENERIC | GMC
# Default      = GENERIC
# WiFiClientType = GENERIC
WiFiClientType = GMC

# WiFiClientDevice TUBE SENSITIVITY:
# In case the device contains a Geiger tube.
# To be given in units of CPM/(µSv/h), see discussion at the top at Defaults
#
# Option auto defaults to 154
#
# Options:              auto | <any positive number>
# Default             = auto
WiFiClientSensitivity = auto

# WiFiClientDevice VARIABLES:
# The choice of variables depends on the WiFiClientDevice TYPE selected above:
#
# if WiFiClientDevice TYPE is: GENERIC
#   All variables can be selected
#
#   Option auto defaults to 'CPM, CPS, Temp, Press, Humid'.
#
#   Options:          auto | <any combination of CPM, CPS, CPM1st, CPS1st, CPM2nd,
#                            CPS2nd, CPM3rd, CPS3rd, Temp, Press, Humid, Xtra>
#
# if WiFiClientDevice TYPE is: GMC
#   The GMC counters can provide only its variables CPM, ACPM, uSV, which
#   will be mapped to: CPM3rd, CPS3rd, and Xtra. The mapping is fixed;
#   changes are NOT possible, but you can select only 1 or 2 out of
#   the 3 possible variables.
#
#   Option auto defaults to 'CPM3rd'
#
#   Options:          auto | <any combination of CPM3rd, CPS3rd, Xtra>
#
# Default           = auto
WiFiClientVariables = auto

