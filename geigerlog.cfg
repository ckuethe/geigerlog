## geigerlog.cfg - The GeigerLog configuration file

###############################################################################
##    This file is part of GeigerLog.
##
##    GeigerLog is free software: you can redistribute it and/or modify
##    it under the terms of the GNU General Public License as published by
##    the Free Software Foundation, either version 3 of the License, or
##    (at your option) any later version.
##
##    GeigerLog is distributed in the hope that it will be useful,
##    but WITHOUT ANY WARRANTY; without even the implied warranty of
##    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##    GNU General Public License for more details.
##
##    You should have received a copy of the GNU General Public License
##    along with GeigerLog.  If not, see <http://www.gnu.org/licenses/>.
###############################################################################

#__author__          = "ullix"
#__copyright__       = "Copyright 2016, 2017, 2018, 2019, 2020, 2021, 2022"
#__credits__         = [""]
#__license__         = "GPL3"

# Usage:
# All lines beginning with '#' are comments and will be ignored
#
# The structure is:
#       [Section]
#       # comment
#       # Options:  value1 | value2 | ...
#       # Default = value
#       parameter = value
#
# NOTE: non-acceptable values will be silently ignored, and replaced with
#       defaults, but a debug message will be printed to the terminal and log file
#
# NOTE: There MUST NOT be more than one entry per parameter, or an error
#       will be shown, and the program ends!
#
# NOTE: Exact Capitalization required key words !!!!
#
# NOTE: Don't need an option? Do NOT delete, leave as is.
#
#
# EDITING NOTE:
# If the percent-sign ('%') is to be used anywhere (not recommended), it
# must be entered in duplicate! So, e.g. in a password, having a single '%':
#      WRONG:   my%password
#      RIGHT:   my%%password
# The end result in GeigerLog will be a single '%' only: 'my%password'
# (a consequence of Python's string formatting)



[Logging]
# LOGCYCLE:
# GeigerLog's logging cycle in seconds. Can be changed while running GeigerLog
#
# Option auto defaults to 1. Any entry less than 0.1 will be replaced with default.
#
# Options:    auto | <any number 0.1 or greater>
# Default   = auto
logCycle    = auto


[DataDirectory]
# Provide a relative or an absolute path to a folder used to store the data files.
#
#
# A relative path will be relative to the built-in default data folder.
# It must be given as:
#   in Linux:     beginning WITHOUT slash ('/')
#   in Windows:   beginning WITHOUT drive name (e.g. 'c:') AND
#                 beginning WITHOUT backslash ('\') or slash ('/')
#
# An absolute path must be given as:
#   in Linux:     beginning WITH slash ('/')
#   in Windows:   beginning WITH drive name (e.g. 'c:')
#
# Option auto defaults to folder 'data' as subdirectory to the GeigerLog folder
#
# Options:   auto | <any folder name>
# Default  = auto
DataDir    = auto


[Network]
# SSID and PASSWORD for your local WiFi network
#   SSID:     max: 32 ASCII character:  123456789:123456789:123456789:12
#   Password: max: 63 ASCII character:  pp3456789:pp3456789:pp3456789:pp3456789:pp3456789:pp3456789:pp3
#
WiFiSSID     = <mySSID>
WiFiPassword = <myPassword>



[Graphic]
# MOVING AVERAGE:
# Enter the smoothing period in sec.
#  60 sec =  1 min is adequate for seeing CPS recorded data as CPM
# 600 sec = 10 min is adequate for overnight recordings of CPM/CPS
#
# Options:      <any number greater than 0 (zero)>
# Default     = 600
MovingAverage = 600



[Plotstyle]
# If your plot does not come out as expected, check the geigerlog.proglog file
# for messages; you may have set something unrecognizeable.

# LINEWIDTH:
# The width of the line in points >= 0. A width of 0 (zero) makes the line
# invisible.
#
# Options:    <any number greater or equal to 0 (zero)>
# Default   = 1
linewidth   = 1

# MARKERSYMBOL:
# See allowed symbols at: https://matplotlib.org/stable/api/markers_api.html
#
# Options:     "o" (circle)  | "s" (square) | "p" (pentagon) | "*" (star) |
#              "h" (hexagon) | "+" (plus)   | "x" (x)        | "D" (diamond)
# Default    = o (circle = small cap o, like in oscar)
markersymbol = o

# MARKERSIZE:
# The size of the marker for a datapoint. A marker size of x has the same
# diameter as a line of width x is wide, i.e. the marker would not be
# visible on the line!
#
# GeigerLog reduces the markersize with increasing number of data points. Here
# you specify the starting size. i.e. when only a single data point is shown.
#
# Options:    <any number greater or equal to 0 (zero)>
# Default   = 15
markersize  = 15



[Window]
# HiDPI MONITORS
# High-Resolution Monitors of size 4k and 8k are becoming affordable, but
# represent a challenge for a lot of software. Details in the GeigerLog manual.
#
# This is work-in-progress and may need custom modifications if the auto
# settings do not work well (enough).

# HiDPIactivation
# This option should not give problems on any system.
#
# A known exception is the Raspberry 4 system (status August 2020), where the
# setting must be 'no' or the screen will be distorted and GeigerLog difficult
# to use.
#
# Option auto defaults to 'yes'
#
# Options:         auto | yes | no
# Default        = auto
HiDPIactivation  = auto

# HiDPIscaleMPL
# This compensates any HiDPI scaling for the graphs generated by
# matplotlib. It may not work in all cases.
#
# For a FullHd screen the 'scaling' set in the operating system is typically 100%.
# Any different scaling must be compensated by HiDPIscaleMPL.
#
# For a HiDPI screen the scaling maybe 150%, 200%, 300%, or 400%. Numbers
# different from this list may result in problems in all software!
#
# If the 'auto' option does not give satisfactory results, try these settings:
#   scaling: 150%     ->  HiDPIscaleMPL = 70
#   scaling: 200%     ->  HiDPIscaleMPL = 50
#   scaling: 300%     ->  HiDPIscaleMPL = 33
#   scaling: 400%     ->  HiDPIscaleMPL = 25
# and modify until you find a satisfactory setting. Floating point values ok.
#
# Option auto defaults to a value calculated internally, which may or may not be
# appropriate.
#
# Options:      auto | <any number greater than zero>
# Default     = auto
HiDPIscaleMPL = auto

# WINDOW WIDTH AND HEIGHT:
# The window is positioned at the top right corner; Dimensions in pixel.
# Depending on Window manager and custom configuration, the default may not
# fit. Change to adapt for your screen and settings.
#
# Default assumes a hardware screen size of 1366x768 with 2 panels of
# height 24 and std window bar.
#
# Options:         <any positive number>
# Default width  = 1366
#         height = 720
windowWidth      = 1366
windowHeight     = 720

# WINDOW SIZE:
# window size can be auto or maximized. On auto it will be tried to set to
# width x height as defined above. On maximized the window will be maximized.
#
# Option auto defaults to not-maximized
#
# Options:   auto | maximized
# Default  = auto
windowSize = auto

# WINDOW STYLE:
# The style determines Look & Feel. The default style is determined by the
# system itself. See GeigerLog manual, chapter: Appendix A â€“ Look & Feel
#
# Option auto defaults to the style selected by the operating system.
# Styles perhaps available are: 'Windows', 'Fusion'.
# If an unavailable style is set, then the default is used.
#
# Options:    auto | <see manual; correct capitalization required>
# Default   = auto
windowStyle = auto


[Manual]
# Manual NAME:
# Filename of the GeigerLog Manual included with the code.
#
# Option auto defaults to the first found file in the GeigerLog
# directory with a filename beginning with 'GeigerLog-Manual'.
# If none found, GeigerLog looks online.
#
# Options:   auto | <full name like: 'GeigerLog-Manual-v1.0.pdf'>
# Default  = auto
ManualName = auto


[MonServer]
# MonServer will serve web pages to support monitoring GeigerLog with remote
# devices, like a smartphone.
#
# MonServer Autostart
# You can choose to autostart the MonServer by setting this option to yes,
# or to require manual activation by setting it to no
#
# Options:           yes | no
# Default          = yes
MonServerAutostart = yes

# MonServer SSL
# MonServer can be run either as regular (non-secure) server, or as secure (SSL secured) server.
#
# If SSL is activated here, then in addition a PEM file is needed, which stores the cryptographic
# keys. For details see GeigerLog manual in chapter "Web Enablement".
#
# Options:     yes | no
# Default    = no
MonServerSSL = no


# MonServer UTC Correction
# Browsers like Firefox and Chrome have the unfortunate property of converting all
# Javascript time formats as if they were UTC times. Other browsers may respond
# differently, so if the automatic correction fails, you can enter the proper
# correction here.
#
# The value entered here is ADDED to the times found by the browsers. E.g., Germany
# has a 1 h offset to UTC in wintertime, and 2h in summertime. So, in summertime
# correct with  -2 * 3600 (= minus 7200) sec.
#
# Option auto defaults to the internal calculation.
#
# Options:         auto | <any number from -43200 (=-12*3600) to +43200 (=+12*3600)>
# Default        = auto
MonServerUTCcorr = auto


# MonServer Port
# While the MonServer's IP is the same as GeigerLog's IP and is autodetected, port numbers
# must be given. Only numbers in the range of 1024 ... 65535, including, are allowed.
# They can be changed during a run. Port numbers may already be in use by other programs,
# so we give it a range of numbers to choose from.
#
# Option auto defaults to the first available port number out of this sequence:
#       8080, 8081, 8082, 8083, 8085, 8086, 8087, 8088, 8089
#
# You can provide your own sequence of one or more comma separated port numbers. The first
# available port out of that number sequence will be taken.
#
# Options:      auto | < <any allowed number> [, <any allowed number>] [, <any allowed number>] ... >
# Default     = auto
MonServerPort = auto
# MonServerPort = 7070, 7071, 7072, 7073, 7074


# MonServer THRESHOLDS
# Set the threshold values for the Web Monitor gauge transition safe-to-
# caution (green to yellow), and caution-to-danger (yellow to red).
#
# For reasons to chose these levels see GeigerLog manual, chapter:
# "On what grounds do we set the radiation safety levels?"
#   Low   = 0.9;        # 0.9 ÂµSv/h (transition green to yellow)
#   High  = 6.0;        # 6.0 ÂµSv/h (transition yellow to red)
#
# Options auto defaults to: 0.9, 6.0
# NOTE: The first number must be greater than zero, and the second number must
#       be greater than first, or both will be reset to default.
#
# Options:            auto | < <1st: any number greater 0> , <2nd: any number greater 1st> >
# Default           = auto
MonServerThresholds = auto

# MonServer PLOT CONFIG
# Determines what time frame the plots cover, and what variables are shown in the plots.
#
# Three values must be given, length, top plot variable, bottom plot variable.
# The variable numbers are counted from 0 to 11:
# 0=CPM, 1=CPS, 2=CPM1st, 3=CPS1st, 4=CPM2nd, 5=CPS2nd, 6=CPM3rd, 7=CPS3rd, 8=Temp, 9=Press,10=Humid, 11=Xtra
#       first value:    last minutes of records to show in plot (minimum: 0.1 min, maximum: 1500 min)
#       second value:   number of the variable for top plot
#       third value:    number of the variable for bottom plot
# Example: 10, 2, 3, which means: last 10 min, top: CPM1st, bottom: CPS1st
#
# Option auto defaults to 10, 2, 3
#
# Options:            auto | < <last minutes>, <variable number top plot>, <variable number bottom plot> >
# Default           = auto
# MonServerPlotConfig = auto
MonServerPlotConfig = 300, 6, 7

# MonServer DATA CONFIG
# Determines the averaging periods in minutes for the "Data" web page.
#
# Three values must be given, each is length in minutes for the average shown
# in the 1st, 2nd, 3rd data column.
#
# Option auto defaults to 1, 3, 10
#
# Options:            auto | < <at least 1 >, <at least 2 >, <at least 3 > >
# Default           = auto
MonServerDataConfig = auto


[Worldmaps]
# Currently only the GQ operated website http://www.gmcmap.com  is supported.
# To use it, you have to register there and will obtain:
#   - a UserID      (probably 5 digits,    like: 01234)
#   - a CounterID   (probably 11 digits    like: 12345678901)
#
# WEBSITE and page
# GQ's gmcmap website "http://www.gmcmap.com" and ASP (Active Server Pages) file
# "log2.asp" will be combined with the data to form a typical command like:
# http://www.gmcmap.com/log2.asp?AID=01234&GID=12345678901&CPM=44&ACPM=46&uSV=0.30
# You can use it in any browser to upload any numbers, irrespective of the presence
# of a counter or the numbers being measured. They could be a complete fake!
#
# Website and asp file are the same as in the counter's default config.
# NOTE: the website name MUST NOT be preceded with 'http://'
#
# Options:           <website and asp file>
# Default: Website = www.gmcmap.com
# Default: URL     = log2.asp
gmcmapWebsite      = www.gmcmap.com
gmcmapURL          = log2.asp

# GMCMAP USER ID and GMCMAP COUNTER ID
# For testing purposes you can leave both user and counter ID empty or
# with any text. The gmcmap server will then reject any attempt to
# upload data with the response:  'Error! User not found.ERR1'
#
# Options:            <any text; but valid is only what you got in registration>
# Default           = <placeholder>
# gmcmapUserID      = <myUserId>
# gmcmapCounterID   = <myCounterID>
gmcmapUserID        = <myUserId>
gmcmapCounterID     = <myCounterID>

# PERIOD
# Minutes the counter will wait before uploading next values. The
# fastest is 1 min.
#
# Option auto will default to the GMC devices's default of 2.
#
# Options:            auto | <any integer number greater 0 (zero) >
# Default           = auto
gmcmapPeriod        = auto

# WIFI SWITCH
# Switching WiFi of the counter ON or OFF (provided counter has WiFi)
#
# Options:         ON | OFF
# Default        = ON
gmcmapWiFiSwitch = ON


[ValueScaling]
# Allows to scale the data with a math formula. The formula may include
# math functions. The scaled data will be saved, not the original data!
# see GeigerLog manual chapter: ValueScaling and GraphScaling
#
# As example:
#   A temperature sensor might have a known offset and read 0.3 Â°C too
#   high. This could be corrected by setting: Temp = VAL - 0.3
#
# Option:     val | <math formula> | <empty>
# Default:    val
#
# If 'val' is the only thing entered, or <empty> (nothing entered), then
# no modification will be applied, and the original value will be kept.
#
CPM    = val
CPS    = val
CPM1st = val
CPS1st = val
CPM2nd = val
CPS2nd = val
CPM3rd = val
CPS3rd = val
Temp   = val
Press  = val
Humid  = val
Xtra   = val



[GraphScaling]
# This does ONLY change how the variable is plotted; it does NOT change the
# value of the variable as saved, different from the 'ValueScaling' case above!
#
# As example:
#   The Air Pressure, which is mostly around 1000 +/- 30 hPa, will be
#   plotted as: Press = Press - 1000 to better fit on the ambient scale
#
# Option:     val | <math formula> | <empty>
# Default:    val
#
# If 'val' is the only thing entered, or <empty> (nothing entered), then
# no modification will be applied, and the original value will be kept.
#
CPM    = val
CPS    = val
CPM1st = val
CPS1st = val
CPM2nd = val
CPS2nd = val
CPM3rd = val
CPS3rd = val
Temp   = val
Press  = val
# Press  = val - 1000
Humid  = val
Xtra   = val/100


#
#
# Tubes
#
#

[TubeSensitivities]
# For a detailed discussion see GeigerLog manual in chapter: Appendix G â€“ Calibration.
# This chapter also holds a list of some tubes and their known or claimed sensitivities,
# and gives help for conversions using a different system of units.
#
# Tube sensitivities are in units of "CPM / (ÂµSv/h)", specified individually for each
# of a max of 4 tubes - the higher the number, the more sensitive the tube is!
#
# The tubes are strictly associated with variables, as shown in the Option list:
#
# Option auto defaults to these values:
#                              Value             Naming           Associated with
#                         [CPM / (ÂµSv/h)]                         variables
#    TubeSensitivityDef =      154.0             Default tube     CPM,    CPS
#    TubeSensitivity1st =      154.0             1st tube         CPM1st, CPS1st
#    TubeSensitivity2nd =        2.08            2nd tube         CPM2nd, CPS2nd
#    TubeSensitivity3rd =      154.0             3rd tube         CPM3rd, CPS3rd
#
# Any entries with values of 0 (zero) or negativ will be changed to default.
#
# Options:           auto | <any positive number>
# Default:         = auto
TubeSensitivityDef = auto
TubeSensitivity1st = auto
TubeSensitivity2nd = auto
TubeSensitivity3rd = auto




#
#
# DEVICES
#
#

[GMC_Device]
# This is valid for all GMC Geiger counter devices. The specific version of the
# counter will be auto-discovered.
#
# GMC ACTIVATION
# to use (yes) or not use (no) a GMC counter.
#
# Options:       yes | no
# Default      = no
GMC_Activation = no


# FIRMWARE BUGS
# GQ's firmware has bugs - no surprise for any software. What makes is bad is
# that GQ is dragging their feet when it comes to a complete disclosure of what
# the problem is, and which firmware versions are effected.
# This impacted not only GeigerLog but also their own Dataviewer software.
# So here is an attempt to allow at least for the GeigerLog user to add some
# work-arounds in case more versions should be affected than currently known.

# FIRMWARE BUGS: LOCATION BUG
# The "saving-to-memory" of the counters uses tags (special byte sequences) to
# itentify certain properties needed for the proper parsing of the data.
# Unfortunately, GQ changed the meaning of some tags when they introduced
# 3 and 4 byte storage values, making these firmwares incompatible with previous
# versions. This was reverted, but devices with that wrong firmware were sold.
# See Reply #50, 21.8.2018:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=5331
#
# Option auto defaults to: GMC-500+Re 1.18, GMC-500+Re 1.21
#
# Options:        = auto | <Full Version ID>, <Full Version ID>, <Full Version ID>, ...
# Default         = auto
GMC_locationBug   = auto


# FIRMWARE BUGS: SPIR BUG:
# See the GeigerLog manual for an explanation of the firmware bugs.
#
# Option auto uses these device specific settings:
#   300  series:  no
#   300E series:  yes
#   320  series:  yes
#   500  series:  no
#   600  series:  no
#
# Options:        auto | yes | no
# Default       = auto
GMC_SPIRbugfix  = auto


# FIRMWARE BUGS: SPIRPAGE:
# The memory is organized in pages of 4k (4096) bytes. Due to firmware bugs,
# the history readout may or may not be possible in 4k pages, but only in 2k
# pages. In addition, a bugfix may have to be applied! See GeigerLog manual
# for details.
#
# Option auto uses these device specific settings:
#   300 series:  2k
#   300E series: 4k - bugfix needed!
#   320 series:  4k - bugfix needed!
#   500 series:  2k - may work also with 4k, 8k, 16k but better make sure!
#   500+ series: 4k - may work also with     8k, 16k but better make sure!
#   510 series:  2k - may work also with 4k, 8k, 16k but better make sure!
#   600 series:  2k - may work also with 4k, 8k, 16k but better make sure!
#
# Options:        auto | 2k | 4k | 8k | 16k
# Default       = auto
GMC_SPIRpage    = auto


# FIRMWARE BUGS: FAST ESTIMATE TIME:
# "Fast EstimateTime" is a configuration setting in Device GMC-500+ version
# 2.24 and likely in all other models with a firmware supporting this mode.
# Fortunately it is not present in the GMC-300 and GMC-320 counters.

# This mode is active by default in its worst setting! It invokes an algorithm,
# which is not disclosed by GQ, and which results in a severe distortion of all
# CPM recordings, and may even create counts when there are none.
#
# It has settings of 60, 30, 20, 15, 10 and 5 seconds, plus a 'dynamic' (equal to 3)
# setting, which apparently simply stands for 3 seconds. The latter is the default
# and the worst setting.
#
# It looks like this algorithm is switched off at 60 seconds, therefore this
# setting is strongly recommended! GeigerLog gives a warning when a GMC counter
# is activated with this setting at anything besides 60 seconds.
#
# Option auto sets this to 60. Illegal options will be ignored and replaced with auto.
#
# Options:        3, 5, 10, 15, 20, 30, 60
# Default       = auto
GMC_FastEstTime = auto


# MEMORY:
# This is the memory for data storage. It is 64kB in the older devices, and
# 1 MB in the newer ones. As long as the GMC counter can be recognized,
# GeigerLog will automatically make the correct setting. If for any reason
# this needs to be changed, it can be done here.
#
# 64kB = 2**16 =    65 536 Bytes; fixed setting
# 1MB  = 2**20 = 1 048 576 Bytes; fixed setting
# auto = either 64kB or 1MB, set by GeigerLog depending on counter model
#
# Option auto uses these device specific settings:
#    300 series: 64 kB
#    320 series:  1 MB
#    500 series:  1 MB
#    600 series:  1 MB
#
# Options:   auto | 64kB | 1MB
# Default  = auto
GMC_memory = auto


# CONFIGURATION MEMORY SIZE:
# This is the configuration memory, not the data storage memory! On the older
# 3XX units it was 256 bytes. On the newer 500, 600 units it is 512 bytes.
#
# Option auto uses these device specific settings:
#   300 series: 256 bytes
#   320 series: 256 bytes
#   500 series: 512 bytes
#   600 series: 512 bytes
#
# Options:       auto | 256 | 512
# Default      = auto
GMC_configsize = auto


# VOLTAGE:
# This is the BATTERY voltage, NOT the ANODE voltage!
#
# In the 300 series the battery voltage is reported as a single byte, and the voltage
# is byte/10; e.g. a byte value of 41 is 4.1 Volt. In the 500 and 600 series the
# voltage is reported as a 5 byte ASCII byte string; e.g. b'3.76v' is 3.76 Volt.
#
# Option auto uses device specific settings
#
# Options:         auto | 1 | 5
# Default        = auto
GMC_voltagebytes = auto


# ENDIANNESS:
# For the three bytes of the calibration ÂµSv/h values the order of bytes has
# changed in the latest firmware. It is now:
#   300 series:       little-endian
#   500 / 600 series: big-endian
#
# Option auto uses these device specific settings
#
# Options:       auto | little | big
# Default:     = auto
GMC_endianness = auto


# NBYTES:
# The number of bytes returned by the CPM, CPS, CPM1st, CPS1st, CPM2nd, and
# CPS2nd commands. This is 2 bytes for the older 300 series counters, and
# 4 bytes for the newer ones series 500, 600 with firmware 1.18 or later.
#
# Options:  auto | 2 | 4
# Default = auto
GMC_Bytes = auto


# WiFi Index:
# Points to the configuration setting to be used. If the WiFi settings read out
# by GeigerLog seem to be wrong, try another index.
#
# Current settings:
#   none: 300 series (no WiFi)
#   2:    only 320Re 5.XX
#   3:    old 500er, 600er (firmware 1.x)
#   4:    new 500er, 600er (firmware 2.x)
#
# Option auto uses above settings
#
# Options:       auto | none | 2 | 3 | 4
# Default      = auto
GMC_WifiIndex  = auto


# GMC_DEVICE SERIAL PORT:
# This is the serial port used by the GMC Geiger Counters.
#
# When set to auto, GeigerLog will attempt to auto-detect the port. If it fails you
# can try to configure the port explicitly, but chances are something else is wrong.
#
# The name of the serial port is different in Linux and Windows, see:
# GeigerLog manual: Appendix B â€“ Connecting Device and ComÂ­puter using a Serial Connection
#
# Options: Linux:   auto | /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | ... and others
#          Windows: auto | COM3 | COM4 | COM12 |                       ... and others
#          Mac:     auto | /dev/tty.USBSERIAL | /dev/tty.PL2303-xxx |  ... and others
#
# Default    = auto
GMC_usbport  = auto


# GMC_DEVICE ID:
# This forces GeigerLog to connect only when the specified GMC device is present. The
# specification can be a version of given at any length (GMC-5, GMC-500, GMC-500+Re 1.27)
# and can in addition contain the serial number of the counter.
#
# Examples:
#   GMC_ID = GMC-5, F4884567890ABCDE  # use the first found GMC-500 or GMC-510 counter but
#                                     # only when having the serial No F4884567890ABCDE
#   GMC_ID = GMC-300, None            # use the first found GMC-300 counter with any
#                                     # serial No
#
# Option auto defaults to None, None
# (i.e. both Model and Serial Number are ignored; the first found GMC counter will be used)
#
# Options:      auto | < <Model>,  <Serial Number> >
# Default     = auto
GMC_ID        = auto


# VARIABLES:
# All GMC counter provide CPM and CPS readings. Only the GMC-500+ device,
# having 2 tubes installed, and with at least firmware 1.18, provides
# additional individual readings for each tube as counts per MINUTE (CPM1st
# and CPM2nd) and counts per SECOND (CPS1st and CPS2nd).
#
# The '1st' and '2nd' settings can be used for all other GMC counters as well,
# and will not result in an error, but will provide the exact same as CPM or
# CPS! For consistency, GeigerLog will use "CPM1st, CPS1st" as default variables
# for all GMC counters, even if they have only a single tube, like the 300 and
# 600 series.
#
# NOTE:  On the GMC-500+ both CPM and CPS are useless numbers as they are the
#        sum (!) of both tubes: CPM=CPM1st+CPM2nd, CPS=CPS1st+CPS2nd. This is
#        no meaningful information!
#
# Option auto defaults to:
#        only on 500+:  CPM1st, CPS1st, CPM2nd, CPS2nd
#        on all other:  CPM1st, CPS1st
#
# Options:      auto | <any combination of CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd>
# Default     = auto
# GMC_Variables = auto
GMC_Variables = CPM1st, CPS1st



[AudioCounter]
# Using the PC's internal default audio input (often the microphone) or a USB
# Sound Card to listen to audioclicks from a Geiger counter.
#
# The clicks must reach close to the maximum of the default audio input. The
# input amplification of the PC's sound device should be adjusted accordingly.
# See the manual for pictures.

# AudioCounter ACTIVATION
# to use (yes) or not use (no) an AudioCounter
#
# Options:        yes | no
# Default       = no
AudioActivation = no


# AudioCounter DEVICE
# The audio device is specified with 2 values: 1st is input, 2nd is output.
# The available devices can be shown by running: 'python3 gdev_audio.py' in the
# GeigerLog directory. The output will be similar to this (some lines removed):
#
#   Available Sound Devices:
#      0 HDA Intel HDMI: 0 (hw:0,3), ALSA (0 in, 8 out)
#      ...
#      4 HDA Intel PCH: ALC887-VD Analog (hw:1,0), ALSA (2 in, 0 out)
#      ...
#      7 USB Audio Device: - (hw:2,0), ALSA (1 in, 2 out)
#      8 hdmi, ALSA (0 in, 8 out)
#      ...
#   * 10 default, ALSA (32 in, 32 out)
#
# Here a total of 11 (0 ... 10) devices are available. Only #4, #7, and #10 have
# inputs available. The star in the leftmost column of #10 marks the default
# device. It also has the name 'default', but it can have any other name, and
# still be the default device! Device #7 is an USB sound card, while the others
# are devices internal to this desktop computer.
#
# If a device is specified as 'None', then the system's default will be used.
# Otherwise specify its name or its number, examples:
#       None, None
#       HDA Intel PCH, 10
#       USB, hdmi
#       7, 8
# The last two lines specify the same devices in this example
#
# Option auto defaults to None, None
#
# Options:        auto | None, None | < <InputDevice Name|Number>, <OutputDevice Name|Number> >
# Default       = auto
AudioDevice     = auto


# AudioCounter LATENCY
# Can be used to finetune the AudioCounter behavior. From experience, and
# dependent on the sound card, values in sec from 0.05 ... 2.0 may be helpful.
#
# Option auto defaults to 1.0, 1.0
#
# Options:        auto | <<any number greater than zero> , <any number greater than zero>>
# Default       = auto
AudioLatency    = auto


# AudioCounter PULSEMAX
# The audio input is normally at zero, and for 16 bit resolution (as used here)
# the maximum signal is thus plus/minus 32768. However, depending on operating
# system this may be shown as plus/minus 1 or any other range.
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
#
# Option auto defaults to 32768
#
# Options:        auto | <any number greater than zero>
# Default       = auto
AudioPulseMax   = auto


# AudioCounter PULSEDIR
# The audio input is normally at zero, and any pulses are either positive or
# negative. Pulses from a GMC300E+, or a SGP-001 are negative
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
#
# Option auto defaults to negative
#
# Options:        auto | negative | positive
# Default       = auto
AudioPulseDir   = auto


# AudioCounter Threshold
# If possible the audio input should be adjusted such that the Geiger pulses
# reach the negative/positive limit, but does not exceed them. The number
# given here sets the percentage of the maximum possible signal which must
# be reached in order to trigger a count. 60[%] has been a good value so far.
# Confirm via menu: Device -> AudioCounter Series -> Plot Audio
#
# Option auto defaults to 60
#
# Options:        auto | < a positive number less than 100>
# Default       = auto
AudioThreshold  = auto


# AudioCounter VARIABLES:
# All CPM* and CPS* are available (CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd,
# CPM3rd, CPS3rd), but only a max of 2 variables can be specified.
# If 2 variables are specified, then one must be of the M type, and one of
# the S type (per minute, per second).
#
# Option auto defaults to 'CPM3rd, CPS3rd'
#
# Options:        auto | <any combination of CPM*, CPS*, see above>
# Default       = auto
AudioVariables  = auto



[RadMonPlusDevice]
# A device from here: https://sites.google.com/site/diygeigercounter/gk-radmon
#
# The RM+ can act as a Geiger counter providing CPM data, and with an optional
# BME280 sensor additionally acts as an environmental monitor for Temperature,
# Pressure, and Humidity. The RM+ must be configured to send its data to an
# MQTT server. This server's IP must be made known to GeigerLog.
#
# NOTE: The server must be using protocol=mqtt.MQTTv311! The RadMon device is
# not able to connect to a server using the protocol=mqtt.MQTTv31
#
# The RM+ update cycle can be configured at the RM+, but it is best set to
# 60 sec for CPM readings, and with an extra of about 7 sec for reading the
# environmental sensor and for sending the data, the total cycle is about 67 sec.
#
# GeigerLog connects to the MQTT server for new data and logs them. GeigerLog
# can read all 4 variables. If no new data are found, the log displays empty
# values, but they won't be saved in the records. Logging/displaying/analyzing
# will not be impacted.
#
# Demonstration Mode
# A Demo-Mmode can be activated in GeigerLog, which defines my perÂ­sonal
# RadMon+ device as active, and allows any user of GeigerLog to read genuine
# real-time data from a RadMon+.

# RadMonPlusDevice ACTIVATION
# to use (yes) or not use (no) a RadMonPlusDevice
#
# Options:        yes | no
# Default       = no
RMActivation    = no


# RadMonPlusDevice SERVERIP:
# The server IP can be either a numerical IP like "10.0.0.81" (in local network),
# or "198.41.30.241", or a URL like "mqtt.eclipse.org".
#
# NOTES: previously used server "iot.eclipse.org" is out-of-service!
#        previously used server "mqtt.eclipse.org" is out-of-service (since
#        December 12, 2020)
#
# newly chosen server: "test.mosquitto.org", see: http://test.mosquitto.org/
#
# Other IP options: https://github.com/mqtt/mqtt.github.io/wiki/public_brokers
# -  broker.hivemq.com  (tested ok, see: http://www.mqtt-dashboard.com/)
#
# Test: If you have the mosquitto clients installed try:
#       mosquitto_sub -h test.mosquitto.org -t "geigerlog/#" -v
#
# Option auto becomes "test.mosquitto.org" (IP: 5.196.95.208)
#
# Options:    auto | <IP address>
# Default   = auto
RMServerIP  = auto


# RadMonPlusDevice SERVER PORT:
# Standard port is 1883
#
# Option auto becomes 1883
#
# Options:     auto | <port number>
# Default    = auto
RMServerPort = auto


# RadMonPlusDevice SERVER FOLDER:
# This must be the same folder as defined during the setup of the RadMon+
# device. For details search for MQTT. In MQTT these folders are called 'topics'.
# CAUTION: you may get flooded with useless messages when you enter no proper
# folder!
#
# A blank (' ') is not allowed in the folder name! If no final '/' is given, it
# will be auto-added
#
# Options:        <folder as defined in your RadMon+ device, ending with '/'>
# Default       = /
# Demo-Mode:    = geigerlog/
RMServerFolder  = geigerlog/


# RadMonPlusDevice TIMEOUT:
# establishing a connection in a local network takes ~10 milliseconds, but to a
# remote server on poor connections might take several hundred milliseconds.
# To be on the safe side a long timeout is set.
#
# Option auto defaults to 5 (sec)
# NOTE: any number zero or negative will be changed to default
#
# Options:        auto | <any positive number>
# Default       = auto
RMTimeout       = auto


# RadMonPlusDevice VARIABLES:
# The RM+ can provide only CPM data, or only Temp, Press, Humid, Xtra (Temperature,
# Pressure, Humidity, RSSI) data, or all of them.
#
# The CPM values can be mapped to any of the CPM* variables. Any CPS* setting
# will be ignored.
#
# As the Temp, Press, Humid data come from one sensor, they are either all present
# or none, yet you can select or ignore them individually for logging.
#
# Xtra is the RSSI (WiFi strength) reported by the RadMon
#
# Option auto defaults to 'CPM3rd, Temp, Press, Humid'
#
# Options:        auto | <any combination of Temp, Press, Humid, Xtra and one of (CPM, CPM1st, CPM2nd, CPM3rd)>
# Default       = auto
RMVariables     = auto



[AmbioMonDevice]
# A device in development. The AmbioMonDevice provides Geiger counter
# CPM / CPS data, and with its BME680 sensor provides environmental
# data for Temperature, Pressure, Humidity, and Air Quality.
#
# The AmbioMon Device acts as a web server and has its own IP Address.
# GeigerLog needs this address to connect to the AmbioMon Device via
# local or remote internet connection. GeigerLog can read and log all
# variables, and it can download any history stored on the AmbioMonDevice.
#
# AmbioMonDevice ACTIVATION
# to use (yes) or not use (no) an AmbioMonDevice
#
# Options:        yes | no
# Default       = no
AmbioActivation = no


# AmbioMonDevice SERVER IP:
# This must be given to GeigerLog, it cannot be auto-discovered. It can
# be numeric, like '198.41.30.241', or a domain name, like 'mydevice.com'.
#
# If you use auto, then GeigerLog will use the IP of the computer it is running
# on. See GeigerLog manual for how you can use that for a getVarIndexator device.
#
# Option auto defaults to the GeigerLog computer's IP.
#
# Options:        auto | <IP address>
# Default       = auto
AmbioServerIP   = auto


# AmbioMon Device SERVER PORT:
# The port number on which your AmbioMon Device is listening. The
# standard port for the server is 80, but it can be any number
# from 0 ... 65535.
#
# Option auto defaults to 80.
# NOTE: any number outside the allowed range will be changed to default.
#
# Options:        auto | <any number 0 ... 65535>
# Default       = auto
AmbioServerPort = auto


# AmbioMonDevice TIMEOUT:
# Establishing a connection in a local network takes ~10 milliseconds, but may
# take much longer and may fail. To be on the safe side a timeout of 3 sec is
# set. If this still fails, then something else may be wrong!
# NOTE: any option number zero or negative will be changed to 3
#
# Option auto defaults to 3.
#
# Options:        auto | <any positive number>
# Default       = auto
AmbioTimeout    = auto


# AmbioMonDevice DATATPYE
# The datatype GeigerLog will request from the AmbioMon Device. Can be
# - Last : the set of values collected in the last second
# - Avg  : the average of the values over the last minute
#
# Option auto defaults to 'Last'
#
# Options:        auto | Last | Avg
# Default       = auto
AmbioDataType   = auto


# AmbioMonDevice VARIABLES:
# The AmbioMon can provide CPM, CPS, Temp, Press, Humid, Xtra (Temperature, Pressure,
# Humidity, Air quality) data.
# The CPM / CPS values should be mapped to any of the CPM*/CPS* variables.
# As the Temp, Press, Humid, Xtra data come from one sensor, they are either all or
# none present, yet you can select or ignore them individually for logging.
#
# Option auto defaults to 'CPM, CPS, Temp, Press, Humid, Xtra'.
#
# Options:        auto | <  any combination of:
#                           Temp, Press, Humid, Xtra,
#                           <one of (CPM, CPM1st, CPM2nd, CPM3rd)>,
#                           <one of (CPS, CPS1st, CPS2nd, CPS3rd)>
#                        >
# Default       = auto
AmbioVariables  = auto



[GammaScoutDevice]
# Using a Gamma-Scout Geiger counter
# see: https://www.gamma-scout.com/unsere-produkte/
#
# GammaScoutDevice Activation
# to use (yes) or not use (no) a GammaScoutDevice
#
# Options:      yes | no
# Default     = no
GSActivation  = no


# GammaScoutDevice VARIABLES:
# All Gamma Scout counter models 'Standard, 'Alert', 'Rechargeable', and
# 'Online' are supported by GeigerLog, but by the counters' hardware
# limitations the 'Online' model is the only one which allows logging.
#
# When logging is started with any of the other three, logging will be
# running, and no harm is done, but only NAN values will ever be returned,
# signalling "no data".
#
# The variables are used as:
#   CPS*   : gets the counts in whatever the interval set at the counter.
#            Caution: This interval may be changed during a run by the counter itself!
#   CPM*   : gets CPM as CALCULATED from CPS* and Xtra
#   Xtra   : gets the interval over which each value of CPS* is counted
#
# Option auto defaults to 'CPM3rd, CPS3rd, Xtra'
#
# Options:       auto | <
#                         < One of CPM, CPM1st, CPM2nd, CPM3rd >,
#                         < One of CPS, CPS1st, CPS2nd, CPS3rd >,
#                         Xtra
#                       >
# Default      = auto
GSVariables    = auto


# GammaScoutDevice SERIAL PORT:
# The name of the serial port by which the USB-to-Serial chip inside the counter is
# recognized by the computer.
#
# When set to auto, GeigerLog will attempt to auto-detect the port. If it fails you
# can try to configure the port explicitly, but chances are something else is wrong.
#
# The name of the serial port is different in Linux and Windows, see:
# GeigerLog manual: Appendix B â€“ Connecting Device and ComÂ­puter using a Serial Connection
#
# Options:   Linux:   auto | /dev/ttyUSB0 | /dev/ttyUSB1 | dev/ttyS91 |  ... and others
#            Windows: auto | COM3 | COM4 | COM12 |                       ... and others
#            Mac:     auto | /dev/tty.USBSERIAL | /dev/tty.PL2303-xxx |  ... and others
#
# Default  = auto
GSusbport  = auto



[I2C]
# Using I2C sensors connected via a dongle (specified next)
#
# see also Articles: (https://sourceforge.net/projects/geigerlog/files/Articles/)
#   - "Review of USB-To-I2C Dongles as used by GeigerLog"
#   - "Measuring CO2 with SCD30, SCD41, and MiniMon"
#
# I2C Activation
# to use (yes) or not use (no) an I2C Device
#
# Options:      yes | no
# Default     = no
I2CActivation = no


# I2C DONGLE:
# GeigerLog supports these three dongles for the connection of I2C sensors:
# Best performance is achieved with the USB-ISS dongle.
# - Dongle: ISS:    USB-ISS      - best - connected as USB-To-Serial device
# - Dongle: ELV:    ELV USB-I2C  - ok   - connected as USB-To-Serial device
# - Dongle: IOW:    IOW24-DG     - poor - connected as native USB device under Linux
#
# NOTE: ISS and ELV dongle are supported on all systems Linux, Windows, Mac, ...
#       The IOW dongle is currently supported only on Linux!
#
# Options:   ISS | ELV | IOW
#            NOTE: Unsupported entries will result in selection of ISS
# Default  = ISS
I2CDongle  = ISS
# I2CDongle  = ELV
# I2CDongle  = IOW


# I2C SERIAL PORT:
# This is the serial port used by these two I2C dongles: ISS and ELV.
# The dongle IOW connects as native USB device and doesn't need this configuration.
#
# When set to auto, GeigerLog will attempt to auto-detect the port. If it fails you
# can try to configure the port explicitly, but chances are something else is wrong.
#
# The name of the serial port is different in Linux and Windows, see:
# GeigerLog manual: Appendix B â€“ Connecting Device and ComÂ­puter using a Serial Connection
#
# Options: on Linux:   auto | /dev/ttyUSB0 | /dev/ttyUSB1 | /dev/geiger | /dev/ttyACM0 ... and others
#          on Windows: auto | COM3 | COM12 |                                           ... and others
#          on Mac:     auto | /dev/tty.USBSERIAL | /dev/tty.PL2303-xxx |               ... and others
#
# NOTE:    with x = 0, 1, 2, 3, ...
#          on Linux:   the ELV USB-I2C  will be using /dev/ttyUSBx ports by default
#                      the USB-ISS      will be using /dev/ttyACMx ports by default
#          on Windows: both             will be using COMx ports by default
#
# Default  = auto
I2Cusbport = auto


# I2C SENSORS and I2C Variables
# The following sensors are supported in GeigerLog. They deliver from 1 to 3
# values of the type listed:
#
#   Sensor     No. of Values     Type of values (in order of delivery by the sensor)
#                measured
#   -------------------------------------------------------------------------------
#   LM75:            1           Temperature
#   BME280:          3           Temperature, (Barometric-)Pressure, Humidity
#   SCD30:           3           CO2 (by NDIR), Temperature, Humidity
#   SCD41:           3           CO2 (by Photoacoustic), Temperature, Humidity
#   TSL2591:         2           Intensity Visible Light, Intensity Infrared Light
#   BH1750 (=GY-30): 1           Intensity Visible Light
#   GDK101:          3           CPM, CountsPer10min, MeasuringTime
#
# A configuration is needed which defines 3 settings per sensor, separated by comma:
#   1. Activate the sensor:                             <yes | no>
#   2. The sensors's I2C address in your hardware:      <address as hex value, like: 0x48>
#   3. Mapping of sensor values to GeigerLog variables: see below
#
# 1.Activation
#   If activated, the sensor will be used by GeigerLog. If not, it does not hurt to leave
#   it in the circuitry, and it may also be left powered, but GeigerLog won't talk to it.
#
# 2.I2C Address
#   The address is determined by the sensor manufacturer. It will be in the space of
#   0x00 ... 0xFF (128 addresses). Devices may allow only a single address or multiple,
#   depending on hardware. Sometimes the user can modify it, sometimes not.
#
#   Possible Addresses for the supported sensors:
#       LM75:    0x48 | 0x49 | 0x4A | 0x4B | 0x4C | 0x4D | 0x4E | 0x4F
#       BME280:  0x76 | 0x77
#       SCD30:   0x61
#       SCD41:   0x62
#       TSL2591: 0x29
#       BH1750:  0x23 | 0x5C
#       GDK101:  0x18 | 0x19 | 0x1A | 0x1B
#
# 3.Mapping of sensor values to GeigerLog's variables
#   The sensor values will be delivered from each sensor in the order shown in the table
#   above. Those values need to be mapped to GeigerLog's variables. Any combination of
#   GeigerLog's variables can be used in any order. However, no more variables can be set
#   as the sensor can deliver values; any additional ones will be ignored.
#
#   GeigerLog will skip a variable if the word None is used instead of a variable name.
#
#   Examples:
#   I2CSensorLM75    = yes, 0x48, CPM2nd
#                        The LM75 sensor will be used at I2C address 0x48, and its
#                        Temperature value will be mapped to GeigerLog variable CPM2nd
#   I2CSensorSCD41   = yes, 0x62, CPM, None, CPS1st, Xtra
#                        The SCD41 sensor will be used at I2C address 0x62 (its only one),
#                        and its 3 output values are handled like this:
#                        - its CO2 value is mapped to GeigerLog variable CPM,
#                        - its Temperatur value is skipped, i.e. not registered at all,
#                        - its Humidity value is mapped to CPS1st,
#                        - Xtra is ignored as the sensor can deliver only 3 values.
#
# Options:  < yes | no > , <Sensor Addr in hex> , <any combination of None,
#                                                  CPM, CPS, CPM1st, CPS1st,
#                                                  CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                                                  Temp, Press, Humid, Xtra>
#
# Defaults:
# I2CSensorLM75    = no,  0x48, CPM2nd                  # Temperature
# I2CSensorBME280  = no,  0x76, Temp, Press, Humid      # Temperature, Pressure, Humidity
# I2CSensorSCD30   = no,  0x61, CPM, CPM1st, CPS1st     # CO2, Temperature, Humidity
# I2CSensorSCD41   = no,  0x62, CPM, CPM1st, CPS1st     # CO2, Temperature, Humidity
# I2CSensorTSL2591 = no,  0x29, CPM3rd, CPS3rd          # Visible Light, Infrared Light
# I2CSensorBH1750  = no,  0x23, CPM3rd                  # Visible Light
# I2CSensorGDK101  = no,  0x18, CPM3rd                  # Count Rate
#
# TIP: the presence of "y" in the first column makes it a "yes"; its absence a "no"
#
# in my use with ISS dongle
I2CSensorLM75      =  n, 0x48, CPS3rd
# I2CSensorBME280    =  n, 0x76, Temp,   Press, Humid
I2CSensorBME280    = yn, 0x76, Humid,   None, None
I2CSensorSCD30     =  n, 0x61, CPM1st, Press, None
I2CSensorSCD41     =  n, 0x62, CPM2nd, Humid, None
# I2CSensorTSL2591   = yn, 0x29, CPS3rd, None
# I2CSensorBH1750    = yn, 0x23, CPM3rd
I2CSensorTSL2591   = yn, 0x29, Temp, None
I2CSensorBH1750    = yn, 0x23, Press
I2CSensorGDK101    =  n, 0x18, CPM3rd, CPS3rd, Temp

# # in my use with ELV dongle
# I2CSensorLM75      = yn, 0x48, CPS3rd
# I2CSensorBME280    =  n, 0x76, Temp,   Press,   Humid
# I2CSensorSCD30     =  n, 0x61, CPM1st, Press, None
# I2CSensorSCD41     =  n, 0x62, CPM2nd, Humid, None
# I2CSensorTSL2591   =  n, 0x29, CPM3rd, Xtra
# I2CSensorGDK101    = yn, 0x18, CPM3rd



[LabJackDevice]
# NOTE: verfied to work on Linux; it may work on Mac, but not tested
#       Windows will not work; it needs a different installation of drivers
#
# A device of the LabJack category from company LabJack:  https://labjack.com/
# The LabJack device is connected via USB bus - true USB, NOT a USB-to-Serial!
# Currently only the U3 Series is supported, https://labjack.com/products/u3
#
# To use the LabJack device, you may need additional installations; see header
# of file gdev_labjack.py
#
# LabJackDevice ACTIVATION
# to use (yes) or not use (no) a LabJack device.
#
# Options:     yes | no
# Default    = no
LJActivation = no


# LabJackDevice EI1050 PROBE ACTIVATION
# to use (yes) or not use (no) the Temperature and Humidity LabJack probe EI1050
#
# Options:           yes | no
# Default          = yes
LJEI1050Activation = yes


# LabJackDevice VARIABLES:
# The current GeigerLog software supports these measurements:
# 1. The measurement of up to 8 voltages on the pins FIO0 ... FIO7, with the
#    connections made via "LJTick-Divider4", which allow voltages  +0 ... +10V.
# 2. The measurement of Temperature and Humidity with the external probe EI1050
#    https://labjack.com/support/datasheets/accessories/ei-1050
#    https://labjack.com/accessories/ei1050-digital-temperaturehumidity-probe
# 3. The measurement of the internal temperature of the LabJack U3
#
# The mapping to the GeigerLog variables is as follows:
# ad 1: The 8 voltages are mapped to CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd,
#       CPM3rd, CPS3rd,
# ad 2: Temperature and Humidity are mapped to the Temp and Humid, resp.
# ad 3: U3 Internal Temperature is mapped to Xtra
#
# Option auto defaults to 'CPM, CPS, CPM1st, CPS1st'
#
# Options:    auto | <any combination of CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd,
#                     CPM3rd, CPS3rd, Temp, Humid, Xtra>
# Default   = auto
LJVariables = auto



[MiniMon]
# MiniMon is a CO2 monitor for indoor use available from multiple distributors,
# e.g. also from TFA Drostman, https://www.amazon.de/gp/product/B00TH3OW4Q/
# Also: https://www.co2meter.com/products/co2mini-co2-indoor-air-quality-monitor
# The USB ID by lsusb is:     ID 04d9:a052 Holtek Semiconductor, Inc.
#
# MiniMon ACTIVATION
# to use (yes) or not use (no) a MiniMon device
#
# Options:          yes | no
# Default         = no
MiniMonActivation = no


# MiniMon OSDevice
# MiniMon will appear in the OS as a hidraw device (a raw HID - Human
# Interface Device). Use ls -al /dev/hidraw* to list devices as:
# /dev/hidraw1, /dev/hidraw2, /dev/hidraw3, etc.. It is recommended to
# set a udev rule to make the device always show as e.g. /dev/minimon.
# See header of file gdev_minimon.py for details.
#
# Option auto defaults to /dev/minimon
#
# Options:         auto | < a hidraw device like /dev/hidraw3 >
# Default        = auto
MiniMonOS_Device = auto


# MiniMon INTERVAL:
# The Temp, Humid, Xtra values change only very slowly. In order to save
# recording space, a record will only be saved if at least one variable
# value has changed. As this may take several minutes, the interval set
# here forces a saving if none has occured for interval seconds.
#
# Option auto defaults to 60 (seconds).
#
# Options:        auto | <any number greater zero>
# Default       = auto
MiniMonInterval = auto
# MiniMonInterval = 0.5


# MiniMon VARIABLES:
# MiniMon devices can provide Temperature, Humidity, and CO2 data.
#
# However, depending on the actual device, Humidity may NOT be present!
# The TFA Drostmann device mentioned above is such a device without humidity
# sensor. If Humidity were specified in the mapping anyway, the value will
# always be returned as 0 (zero).
#
# MiniMon will deliver the values in the strict order of Temperature, Humidity, CO2.
# While a mapping of these values to 'Temp, Humid, Xtra' would be an obvious
# choice, they can be mapped to any of GeigerLog's variables. Only a maximum
# of 3 variables will be used; any additional ones will be ognored.
# If the device has no Humidity sensor, the preferred way would be to use 'None'
# as variable.
#
# Example:      CPM, None, Press, Xtra
#               would map: Temperature to CPM
#                          Humidity    is ignored (as None is given)
#                          CO2         to Press
#                          Xtra        is ignored (as it is 4th variable)
#
# Option auto defaults to 'Temp, None, Xtra'
#
# Options:         auto | <up to three variables in any combination of
#                               None,
#                               CPM, CPS, CPM1st, CPS1st,
#                               CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                               Temp, Press, Humid, Xtra>
# Default        = auto
MiniMonVariables = auto



[Simul]
# Simul is a synthetic Poisson-Number generator to simulate a true
# Geiger counter.
#
# Simul ACTIVATION
# to use (yes) or not use (no) a Simul Device
#
# Options:        yes | no
# Default       = no
SimulActivation = no


# Simul MEAN
# The Poisson generator needs the CPS mean as its only parameter.
# CPM is calculated from CPS as the sum of the last 60 sec.
#
# A typical background count for a M4011 or SBM20 tube is CPM = 18,
# which gives: CPS = 18 / 60 = 0.3. This is used as default setting.
#
# Option auto defaults to 0.3
#
# Options:     auto | <any number greater 0 (zero)>
# Default    = auto
SimulMean    = auto


# Simul DEADTIME:
# NOTE: currently not used - reserved for later functionality!
#
# The deadtime of the fictitious tube. To be given in Âµs (micro-seconds).
#
# Typical Geiger tube deadtimes range from 50 ... 200 Âµs. GQ is rating
# its M4011 tube with a deadtime of 120Âµs. This may not be correct.
# The true deadtime might well be larger, perhaps as large as 200Âµs, see:
# http://www.gqelectronicsllc.com/forum/topic.asp?TOPIC_ID=4598
#
# NOTE: CPS=7000 is limit for deadtime=120 -> every 10th count fails
#
# Option auto defaults to 120
#
# Options:       auto | <any non-negative number>
# Default      = auto
SimulDeadtime  = auto


# Simul VARIABLES:
# Only the variables CPM and CPS are supported.
#
# Option auto defaults to 'CPM, CPS'
#
# Options:       auto | <any combination of CPM, CPS>
# Default      = auto
SimulVariables = auto



[Manu]
# Manu is a Manual Data device which allows to enter numeric values manually.
# They will be saved, handled and shown just like any other data.
#
# MANU ACTIVATION
# to use (yes) or not use (no) a Manu device
#
# Options:       yes | no
# Default      = no
ManuActivation = no


# MANU RECORD STYLE
# Determines the treatment of the entered data, Point or Step:
#
# Point: A single value is entered. Upon entering a subsequent value, a
#        straight line will be drawn to connect the two points.
#        Good for ambient values changing "by itself", like temperature,
#        sunlight, or CO2.
#
# Step:  A value is entered and is reused in all following cycles until
#        a new value is entered. This results in a horizontal line and
#        stepwise changes between points.
#        Good for values which have to be changed intentionally, like
#        distance of radioactive source from Geiger counter, or applied
#        anode voltage.
#
# Option auto defaults to point
#
# Options:        auto | point | step
# Default       = auto
ManuRecordStyle = auto


# MANU VARIABLES:
# Choose from a single one to all variables.
#
# Option auto defaults to 'Temp, Press, Humid, Xtra'.
# On wrong input, entries will be reset to default.
#
# Options:        auto | <any combination from:
#                         CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                         Temp, Press, Humid, Xtra>
# Default       = auto
# ManuVariables   = auto
ManuVariables   = Xtra



[WiFiClientDevice]
# WiFiClient devices transmit data on their own schedule; GeigerLog acts as a
# server and waits for their calls.
#
# Example: GMC counters act as WiFiClient devices when they are WiFi-equipped
#          and are sending their data to the Radiation World Map.
#
#          With some extra effort the output of those counters can be redirected
#          into GeigerLog.
#
# See the GeigerLog manual in chapter 'WiFiClient Devices' for details.
#
# WiFiClientDevice ACTIVATION
# to use (yes) or not use (no) a WiFiClientDevice
#
# Options:             yes | no
# Default            = no
WiFiClientActivation = no


# WiFiClientDevice SERVER PORT:
# The port where the GeigerLog server is listening. Only port
# numbers 1024 ... 65535 are accepted.
#
# Option auto defaults to 8000
#
# Options:       auto | <a number from 1024 ... 65535, including>
# Default      = auto
WiFiClientPort = auto


# WiFiClientDevice TYPE
# The default type is "GENERIC" which is the most universal type and means
# that the WiFiClient device can upload up to 12 variables as explained
# below in WiFiClientDevice VARIABLES.
#
# The alternative type is "GMC", by which some adjustments are made and some
# restrictions applied so that WiFi-equipped GMC counters can be used as
# WiFiClient Device.
#
# Calls from GMC counters will be ignored when "GENERIC" is set, and vice-versa.
#
# Any option other than GMC will default to GENERIC.
#
# Options:       GENERIC | GMC
# Default      = GMC
WiFiClientType = GMC
# WiFiClientType = GENERIC


# WiFiClientDevice VARIABLES:
# The choice of variables depends on the WiFiClientDevice TYPE selected above:
#
# Options depend on device:
#
#    GENERIC:  (WiFiClientType = GENERIC)
#         All variables can be selected
#
#         Option auto defaults to 'CPM, CPS, Temp, Press, Humid'.
#
#         Options:    auto | <any combination of CPM, CPS, CPM1st, CPS1st, CPM2nd,
#                             CPS2nd, CPM3rd, CPS3rd, Temp, Press, Humid, Xtra>
#
#    GMC:      (WiFiClientType = GMC)
#         The GMC counters can provide only its variables CPM, ACPM, uSV, which
#         will be mapped to: CPM, CPS, and Xtra. The mapping is fixed;
#         changes are NOT possible, but you can select only 1 or 2 out of
#         the 3 possible variables.
#
#         Option auto defaults to 'CPM'
#
#         Options:    auto | <any combination of CPM, CPS, Xtra >
#
# Default           = auto
WiFiClientVariables = auto



[WiFiServerDevice]
# A WiFiServer device is an external device which acts as web server and
# sends data only upon a request from GeigerLog. See details and data format
# in the GeigerLog manual in chapter 'WiFiServer Device'.
#
# WiFiServerDevice ACTIVATION
# to use (yes) or not use (no) a WiFiServerDevice
#
# Options:             yes | no
# Default            = no
WiFiServerActivation = no


# WiFiServerDevice SERVER IP:
# The IP address from your WiFiServer Device. It can be numeric
# like '198.41.30.241', or a domain name like 'mydevice.com'.
#
# The IP of such an external device CANNOT be auto-discovered; you
# need to provide it! If you use auto, then GeigerLog will use the
# IP of the computer it is running on, which could be used in a
# Demo mode (For Demo options see GeigerLog manual).
#
# Option auto defaults to the GeigerLog computer's IP.
#
# Options:     auto | <IP address>
# Default    = auto
# WiFiServerIP = auto
WiFiServerIP = 10.0.0.49


# WiFiServerDevice SERVER PORT:
# The port number on which your WiFiServer Device is listening. The
# standard port for WiFiServer is 80, but it can be any number
# from 0 ... 65535.
#
# Option auto defaults to 80.
# NOTE: any number outside the allowed range will be changed to default.
#
# Options:       auto | <any number 0 ... 65535>
# Default      = auto
# WiFiServerPort = auto
WiFiServerPort = 4000


# WiFiServerDevice FOLDER:
# The folder on the external WiFiServer device, which GeigerLog
# will call, like:  IP:Port/folder
#
# Do not include slashes ('\', '/'); they will be removed.
#
# Option auto defaults to 'GL'
#
# Options:         auto | <anything qualifying as folder name; no slashes>
# Default        = auto
WiFiServerFolder = auto


# WiFiServerDevice TIMEOUT:
# Establishing a connection in a local network takes ~10 milliseconds,
# but may take much longer and may fail, going into a timeout.
#
# Option auto defaults to 0.2.
# NOTE: any option value zero or negative will be changed to default.
#
# Options:          auto | <any positive number>
# Default         = auto
WiFiServerTimeout = auto


# WiFiServerDevice DATATPYE
# The datatype GeigerLog will request from the WiFiServer Device. Can be:
# - Last : the set of values collected last
# - Avg  : the average of the values over the last minute
#          (it is up to the external device to define how to make the avg
#           calculation; could be exact same as Last)
#
# Option auto defaults to 'Last'
#
# Options:           auto | Last | Avg
# Default          = auto
WiFiServerDataType = auto


# WiFiServerDevice VARIABLES:
# The external WiFiServer Device may provide from only one to all of the
# variables which GeigerLog can handle.
#
# Option auto defaults to 'CPM, CPS, Temp, Press, Humid'.
#
# Options:            auto | <any combination of:
#                              CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                              Temp, Press, Humid, Xtra
#                            >
# Default           = auto
# WiFiServerVariables = auto
# WiFiServerVariables = CPM, CPS, Temp
WiFiServerVariables = CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd, Temp, Press, Humid, Xtra



[RaspiPulseDevice]
# NOTE: works ONLY on a Raspberry Pi!
#       can be run on other computers, but then returns only random data
#       from a Poisson distribution
#
# A RaspiPulse device enables pulse counting on its hardware interrupt. See
# GeigerLog manual for more info.
#
# RaspiPulseDevice ACTIVATION
# to use (yes) or not use (no) a RaspiPulseDevice
#
# Options:             yes | no
# Default            = no
RaspiPulseActivation = no


# RaspiPulseDevice Pin:
# The hardware pin on which your RaspiPulse Device will be counting pulses.
# Pins MUST be given in BCM notation!
#
# Option auto defaults to 17.
#
# Options:      auto | <any number out of: 17, (none other tested)>
# Default     = auto
RaspiPulsePin = auto


# RaspiPulseDevice Edge detection:
# Is an interrupt derived from a Rising or Falling edge?
#
# Option auto defaults to RISING
#
# Options:       auto | RISING | FALLING
# Default      = auto
RaspiPulseEdge = auto


# RaspiPulseDevice VARIABLES:
# The RaspiPulse Device can only count pulses, but can provide these variables:
#     CPS           counts in 1 sec (the raw data)
#     CPM           sum of CPS over the last 60 sec
# These values are associated with the specified variables in the order given.
#
# Option auto defaults to 'CPM, CPS'.
#
# Options:            auto | <any combination of up to 2 variables from:
#                              None,
#                              CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                              Temp, Press, Humid, Xtra
#                            >
# Default           = auto
RaspiPulseVariables = auto


[RaspiI2CDevice]
# NOTE: works ONLY on a Raspberry Pi!
#       can be run on other computers, but then returns only random data
#       from a Normal distribution, e.g. with mean=33, stdev=0.5
#
# A RaspiI2C device enables using I2C devices connected to Raspi. See
# GeigerLog manual for more info.
#
# RaspiI2CDevice ACTIVATION
# to use (yes) or not use (no) a RaspiI2CDevice
#
# Options:           yes | no
# Default          = no
RaspiI2CActivation = no


# RaspiI2CDevice Adress:
# The bus address of the I2C device.
#
# The only device currently supported is an LM75B temperature sensor. It
# typically has the address 0x48.
#
# Option auto defaults to 0x48.
#
# Options:       auto | 0x48 | 0x49 | 0x4A | 0x4B | 0x4C | 0x4D | 0x4E | 0x4F
# Default      = auto
RaspiI2CAdress = auto


# RaspiI2CDevice VARIABLES:
# The RaspiI2C Device can measure:
#     Temperature       reported in Â°C
#     AvgTemperature    averaged over the last 60 sec
# These values are associated with the specified variables in the order given.
# 'None' can be used to not record a variable.
#
# Option auto defaults to 'Temp, Press'.
#
# Options:          auto | <any combination of up to 2 variables from:
#                            None,
#                            CPM, CPS, CPM1st, CPS1st, CPM2nd, CPS2nd, CPM3rd, CPS3rd,
#                            Temp, Press, Humid, Xtra
#                          >
# Default         = auto
RaspiI2CVariables = auto



